#!/usr/bin/env python

""" Analyze the XML generated by the Compiler Analysis pass.

    This module contains classes that do various types of analysis over
    the code, including flop count, state and streaming variable access,
    working set, and memory traffic estimates.
"""
__author__ = "Cy Chan"
__copyright__ = "Copyright 2016, The Regents of the University of California, through Lawrence Berkeley National Laboratory"
__credits__ = ["Cy Chan"]
__license__ = "Modified BSD License (see LICENSE file)"
__version__ = "2.0"
__maintainer__ = "Cy Chan"
__email__ = "cychan@lbl.gov"
__status__ = "Production"

import sys
import os

from analyze import StaticAnalysis, TableCondsChecker
from parser import KeyValXMLParser
from params import to_sym_dict

def load_kv_xml(xml_env, default_xml=None, val_type=str, default=[]):
  result = default
  xml_file = os.getenv(xml_env, default_xml)
  if xml_file:
    result = KeyValXMLParser(xml_file, val_type).items
  return result

def main(args):
  # some test parameters
  def_xml        = "../../examples/cns-smc/xml/advance-flat.xml"
#  def_polly_xml  = "../../examples/cns-smc/xml/advance-flat.polly.xml"
#  def_polly_xml  = "../../examples/hpgmg/xml/scops.xml"
  def_polly_xml  = ""
  def_symsubs_xml = "../../examples/cns-smc/symsubs.xml"
  def_namesubs_xml = "../../examples/cns-smc/namesubs.xml"
  def_params_xml = "../../examples/cns-smc/params.xml"
  def_block_params_xml = "../../examples/cns-smc/params.xml"
  def_conds_xml  = "../../examples/cns-smc/conds.xml"
  def_mach_xml   = "../../examples/machine.xml"

  xml_file = os.getenv("xml", def_xml) 
  polly_xml_file = os.getenv("pollyxml", def_polly_xml) 

  symsubs = to_sym_dict(load_kv_xml("symsubs_xml", def_symsubs_xml))
  namesubs = to_sym_dict(load_kv_xml("namesubs_xml", def_namesubs_xml))
  params = to_sym_dict(load_kv_xml("params_xml", def_params_xml))
  block_params = to_sym_dict(load_kv_xml("block_params_xml", def_block_params_xml))
  conds_table = dict(load_kv_xml("conds_xml", def_conds_xml, val_type=bool))
  machine = dict(load_kv_xml("machine_xml", def_mach_xml, val_type=float))

  flag_sub_params = os.getenv("subparams", False) 

  sa = StaticAnalysis(xml_file, polly_xml_file, symsubs, namesubs)
  sa.dump(params, block_params, machine, \
          TableCondsChecker(conds_table), flag_sub_params)
 
if __name__ == '__main__':
  main(sys.argv)

