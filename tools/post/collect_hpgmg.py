#!/usr/bin/env python

""" Analyze the XML generated by the Compiler Analysis pass.

    This module contains classes that do various types of analysis over
    the code, including flop count, state and streaming variable access,
    working set, and memory traffic estimates.
"""
__author__ = "Cy Chan"
__copyright__ = "Copyright 2016, The Regents of the University of California, through Lawrence Berkeley National Laboratory"
__credits__ = ["Cy Chan"]
__license__ = "Modified BSD License (see LICENSE file)"
__version__ = "2.0"
__maintainer__ = "Cy Chan"
__email__ = "cychan@lbl.gov"
__status__ = "Production"

import sys
import os
from distutils.util import strtobool

import analyze
from parser import KeyValXMLParser, to_sym_dict
from sympy.parsing.sympy_parser import parse_expr

# setup for HPGMG code
def hpgmg_args():
  return {
    "xml"          : None, # set this later
    "polly"        : "",
    "symsubs"      : "../../examples/hpgmg/symsubs.xml",
    "namesubs"     : "../../examples/hpgmg/namesubs.xml",
    "params"       : "../../examples/hpgmg/params.xml",
    "block_params" : "../../examples/hpgmg/block_params.xml",
    "conds"        : "../../examples/hpgmg/conds.xml",
    "machine"      : "../../examples/machine.xml",
    "subparams"    : os.getenv("subparams", "False"),
  }

def load_args(args):
  return (
    { "xml"             : args["xml"],
      "polly_xml"       : args["polly"],
      "symsubs"         : to_sym_dict(KeyValXMLParser(args["symsubs"]).items),
      "namesubs"        : to_sym_dict(KeyValXMLParser(args["namesubs"]).items),
    },
    { "params"          : to_sym_dict(KeyValXMLParser(args["params"]).items),
      "block_params"    : to_sym_dict(KeyValXMLParser(args["block_params"]).items),
      "machine"         : dict(KeyValXMLParser(args["machine"], float).items),
      "conds_chk"       : analyze.TableCondsChecker(KeyValXMLParser(args["conds"], float).items),
    })

def main(cl_args):

  (sa_kw_args, kw_args) = load_args(hpgmg_args())

  (irange, jrange, krange) = map(parse_expr, ("(ilo, ihi)", "(jlo, jhi)", "(klo, khi)"))

  f = open("results.tsv", 'w')

  for xml in ["../../examples/hpgmg/xml/hpgmg.7pt.fp.xml", \
              "../../examples/hpgmg/xml/hpgmg.7pt.s2.xml", \
              "../../examples/hpgmg/xml/hpgmg.27pt.fp.xml", \
              "../../examples/hpgmg/xml/hpgmg.27pt.s2.xml", \
              "../../examples/hpgmg/xml/hpgmg.fv4.fp.xml", \
              "../../examples/hpgmg/xml/hpgmg.fv4.s2.xml", \
             ]:

    print "Processing %s ..." % xml
    sa_kw_args["xml"] = xml
    f.write(xml + '\n')

    # parse the XML files and do substitutions
    sa = analyze.StaticAnalysis(**sa_kw_args)

    # write header to file
    for log_block_sz in xrange(2, 7):
      block_sz = 2**log_block_sz
      f.write('\t' + str(block_sz))
    f.write('\n')

    for log_cache in xrange(15, 26):
      kw_args["machine"]["cache_kbytes"] = 2**(log_cache-10)
      print "Setting cache size to %d kbytes ..." % kw_args["machine"]["cache_kbytes"]
      f.write(str(kw_args["machine"]["cache_kbytes"]) + '\t')
      for log_block_sz in xrange(2, 7):
        block_sz = 2**log_block_sz
        print "Setting block size to %d ..." % block_sz
        kw_args["block_params"][irange] = (0, block_sz)
        kw_args["block_params"][jrange] = (0, block_sz)
        kw_args["block_params"][krange] = (0, 64)

        smooth = None
        for func in sa.functions:
          if func.name == "smooth":
            smooth = func
            break

        mt = smooth.collect(analyze.Traffic.collector(**kw_args))
        total_bytes = sum(map(lambda x: x.bytes(), mt))
        print
        print "Total Memory Traffic (L/S) using cache model: %g GiB (%g bytes)" % \
              (float(total_bytes) / 2**30, total_bytes)
        print
        print mt
        f.write(str(total_bytes) + '\t')
      f.write('\n')
    f.write('\n')
  f.close()

if __name__ == '__main__':
  main(sys.argv)
