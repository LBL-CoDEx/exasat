<program>
<function name="CopyBlock">
<nonlocal name="level"/>
<nonlocal name="block"/>
<if linenum="26" conditional="block -> read . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="4" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<if linenum="27" conditional="block -> write . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="4" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<if linenum="31" conditional="dim_i == 1;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<loop linenum="32" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="33" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
</loop>
</loop>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="38" conditional="dim_i == 2;" adds="0" multiplies="0" divides="0" specials="0">
<loop linenum="39" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="40" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="8" writes="1"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
</loop>
</loop>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="46" conditional="dim_i == 4;" adds="0" multiplies="0" divides="0" specials="0">
<loop linenum="47" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="48" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="12" writes="1"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
</loop>
</loop>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="56" conditional="dim_j == 1;" adds="0" multiplies="0" divides="0" specials="0">
<loop linenum="57" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="58" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
</loop>
</loop>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="63" conditional="dim_k == 1;" adds="0" multiplies="0" divides="0" specials="0">
<loop linenum="64" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="65" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
</loop>
</loop>
</if>
<else linenum="70" adds="0" multiplies="0" divides="0" specials="0">
<loop linenum="71" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="72" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="73" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
</loop>
</loop>
</loop>
</else>
</else>
</else>
</else>
</else>
</function>
<function name="IncrementBlock">
<nonlocal name="level"/>
<nonlocal name="block"/>
<if linenum="104" conditional="block -> read . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="6" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<if linenum="109" conditional="block -> write . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="6" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<loop linenum="116" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<loop linenum="117" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<loop linenum="118" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="1" multiplies="1" divides="0" specials="0">
<scalar name="prescale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="7" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
</loop>
</loop>
</loop>
</function>
<function name="MGBuild">
<local name="nProcs"/>
<local name="dim_i"/>
<local name="boxes_in_i"/>
<local name="box_dim"/>
<local name="box_ghosts"/>
<nonlocal name="stdout"/>
<nonlocal name="stderr"/>
<nonlocal name="all_grids"/>
<nonlocal name="fine_grid"/>
<funccall linenum="773" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="783" conditional="level < maxLevels;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="maxLevels" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
<funccall linenum="792" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="maxLevels * sizeof(level_type *)"/>
</funccall>
<if linenum="793" conditional="all_grids -> levels ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="793" name="" origname="fprintf" module="unknown">
</funccall>
<funccall linenum="793" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="799" conditional="maxLevels < 2;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
</if>
<if linenum="823" conditional="fine_box_dim % 2 == 0 && fine_box_dim > 8 && fine_box_dim / 2 >= stencil_get_radius();" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_nProcs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_boxes_in_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="nProcs" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="dim_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="boxes_in_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_dim" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_ghosts" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
<access offset="(-1 )" dependentloopvar="( )" reads="1" writes="0"/>
</array>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_boxes_in_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="831" conditional="fine_boxes_in_i % 2 == 0 && fine_box_dim >= stencil_get_radius();" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_nProcs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_boxes_in_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="nProcs" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="dim_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="boxes_in_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_dim" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_ghosts" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
<access offset="(-1 )" dependentloopvar="( )" reads="1" writes="0"/>
</array>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="coarse_dim" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<if linenum="839" conditional="coarse_dim != 1 && fine_dim_i == 2 * coarse_dim && fine_dim_i / 2 >= stencil_get_radius();" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="nProcs" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="dim_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="boxes_in_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_dim" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_ghosts" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
<access offset="(-1 )" dependentloopvar="( )" reads="1" writes="0"/>
</array>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="coarse_dim" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="847" conditional="coarse_dim != 1 && fine_dim_i == 4 * coarse_dim && fine_box_dim / 2 >= stencil_get_radius();" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="coarse_dim" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_nProcs" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_boxes_in_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="nProcs" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="dim_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="boxes_in_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_dim" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_ghosts" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
<access offset="(-1 )" dependentloopvar="( )" reads="1" writes="0"/>
</array>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="coarse_dim" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="855" conditional="coarse_dim != 1 && fine_dim_i == 8 * coarse_dim && fine_box_dim / 2 >= stencil_get_radius();" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="coarse_dim" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_nProcs" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_boxes_in_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="nProcs" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="dim_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="boxes_in_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_dim" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_ghosts" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
<access offset="(-1 )" dependentloopvar="( )" reads="1" writes="0"/>
</array>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<if linenum="863" conditional="fine_box_dim % 2 == 0 && fine_box_dim / 2 >= stencil_get_radius();" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="fine_box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_nProcs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_boxes_in_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="nProcs" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="dim_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="boxes_in_i" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_dim" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
<array name="box_ghosts" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
<access offset="(-1 )" dependentloopvar="( )" reads="1" writes="0"/>
</array>
</if>
<funccall linenum="863" name="" origname="stencil_get_radius" module="unknown">
</funccall>
</else>
<funccall linenum="855" name="" origname="stencil_get_radius" module="unknown">
</funccall>
</else>
<funccall linenum="847" name="" origname="stencil_get_radius" module="unknown">
</funccall>
</else>
<funccall linenum="839" name="" origname="stencil_get_radius" module="unknown">
</funccall>
</else>
<funccall linenum="831" name="" origname="stencil_get_radius" module="unknown">
</funccall>
</else>
<funccall linenum="823" name="" origname="stencil_get_radius" module="unknown">
</funccall>
<if linenum="871" conditional="dim_i[level] < minCoarseGridDim;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="doRestrict" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
</if>
<if linenum="872" conditional="doRestrict;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
<loop linenum="881" loopvar="level" lowerbound="1" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="h" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numVectors" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="type" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="14" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="2" writes="1"/>
<access offset="(-1 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<array name="nProcs" component="" datatype="int" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  level)" reads="0" writes="0"/>
</array>
<array name="boxes_in_i" component="" datatype="int" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  level)" reads="0" writes="0"/>
</array>
<array name="box_dim" component="" datatype="int" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  level)" reads="0" writes="0"/>
</array>
<array name="box_ghosts" component="" datatype="int" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  level)" reads="0" writes="0"/>
</array>
<funccall linenum="882" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="sizeof(level_type )"/>
</funccall>
<if linenum="883" conditional="all_grids -> levels[level] ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="883" name="" origname="fprintf" module="unknown">
</funccall>
<funccall linenum="883" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<funccall linenum="884" name="" origname="create_level" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="boxes_in_i" argname="boxes_in_i[level]"/>
<arg paramname="box_dim" argname="box_dim[level]"/>
<arg paramname="box_ghosts" argname="box_ghosts[level]"/>
<arg paramname="numVectors" argname="all_grids -> levels[level - 1] -> numVectors"/>
<arg paramname="domain_boundary_condition" argname="all_grids -> levels[level - 1] -> boundary_condition . type"/>
<arg paramname="my_rank" argname="all_grids -> levels[level - 1] -> my_rank"/>
<arg paramname="num_ranks" argname="nProcs[level]"/>
</funccall>
</loop>
<funccall linenum="890" name="" origname="create_vectors" module="unknown">
<arg paramname="level" argname="all_grids -> levels[all_grids -> num_levels - 1]"/>
<arg paramname="numVectors" argname="all_grids -> levels[all_grids -> num_levels - 1] -> numVectors + IterativeSolver_NumVectors()"/>
</funccall>
<funccall linenum="890" name="" origname="IterativeSolver_NumVectors" module="unknown">
</funccall>
<funccall linenum="893" name="" origname="build_restriction" module="unknown">
<arg paramname="all_grids" argname="all_grids"/>
<arg paramname="restrictionType" argname="0"/>
</funccall>
<funccall linenum="894" name="" origname="build_restriction" module="unknown">
<arg paramname="all_grids" argname="all_grids"/>
<arg paramname="restrictionType" argname="1"/>
</funccall>
<funccall linenum="895" name="" origname="build_restriction" module="unknown">
<arg paramname="all_grids" argname="all_grids"/>
<arg paramname="restrictionType" argname="2"/>
</funccall>
<funccall linenum="896" name="" origname="build_restriction" module="unknown">
<arg paramname="all_grids" argname="all_grids"/>
<arg paramname="restrictionType" argname="3"/>
</funccall>
<funccall linenum="897" name="" origname="build_interpolation" module="unknown">
<arg paramname="all_grids" argname="all_grids"/>
</funccall>
<if linenum="921" conditional="all_grids -> my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="921" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<loop linenum="922" loopvar="level" lowerbound="1" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  level)" reads="0" writes="0"/>
<access offset="(-1 )" dependentloopvar="(  level)" reads="0" writes="0"/>
</array>
<funccall linenum="923" name="" origname="rebuild_operator" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="fromLevel" argname="(level > 0?all_grids -> levels[level - 1] :((void *)0))"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
</funccall>
</loop>
<if linenum="925" conditional="all_grids -> my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="925" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<loop linenum="929" loopvar="level" lowerbound="0" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="alpha_is_zero" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="4" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="930" name="" origname="dot" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="id_a" argname="5"/>
<arg paramname="id_b" argname="5"/>
</funccall>
</loop>
<funccall linenum="934" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="MGPrintTiming">
<nonlocal name="stdout"/>
<nonlocal name="all_grids"/>
<funccall linenum="53" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="53" name="" origname="sleep" module="unknown">
<arg paramname="__seconds" argname="1"/>
</funccall>
<funccall linenum="53" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="63" conditional="all_grids -> my_rank != 0;" adds="0" multiplies="0" divides="0" specials="0">
</if>
<funccall linenum="65" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="66" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="66" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="66" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12d ""/>
<arg paramname="" argname="level"/>
</funccall>
</loop>
<funccall linenum="66" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="68" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="68" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="0" writes="0"/>
</array>
<funccall linenum="68" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%10d^3 ""/>
<arg paramname="" argname="all_grids -> levels[level] -> box_dim"/>
</funccall>
</loop>
<funccall linenum="68" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="69" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="69" loopvar="level" lowerbound="0" upperbound="num_levels + 1" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="69" name="" origname="printf" module="unknown">
</funccall>
</loop>
<funccall linenum="69" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="70" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="70" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="70" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="70" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="71" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="71" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="71" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="71" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="72" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="72" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="72" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="72" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="73" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="73" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="73" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="73" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="74" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="74" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="74" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="74" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="75" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="75" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="75" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="75" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="76" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="76" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="76" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="76" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="77" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="77" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="77" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="77" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="79" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="79" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="79" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="79" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="80" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="80" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="80" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="80" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="81" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="81" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="81" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="81" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="82" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="82" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="82" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="82" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="83" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="83" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="83" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="83" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="85" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="85" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="85" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="85" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="86" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="86" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="86" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="86" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="88" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="88" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="88" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="88" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="89" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="89" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="89" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="89" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="90" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="90" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="90" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="90" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="91" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="91" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="91" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="91" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="92" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="92" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="92" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="92" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="94" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="94" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="94" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="94" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="95" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="95" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="95" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="95" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="97" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="97" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="97" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="97" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="98" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="98" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="98" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="98" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="99" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="99" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="99" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="99" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="100" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="100" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="100" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="100" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="101" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="101" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="101" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="101" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="104" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="104" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="104" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="104" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="106" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="106" loopvar="level" lowerbound="0" upperbound="num_levels + 1" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="106" name="" origname="printf" module="unknown">
</funccall>
</loop>
<funccall linenum="106" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="107" name="" origname="printf" module="unknown">
</funccall>
<loop linenum="107" loopvar="level" lowerbound="0" upperbound="num_levels" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="time" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="total" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  level)" reads="1" writes="0"/>
</array>
<funccall linenum="107" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f ""/>
<arg paramname="" argname="time"/>
</funccall>
</loop>
<funccall linenum="107" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""%12.6f\n""/>
<arg paramname="" argname="total"/>
</funccall>
<funccall linenum="109" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="110" name="" origname="printf" module="unknown">
<arg paramname="__format" argname="" Total time in MGBuild %12.6f seconds\n""/>
<arg paramname="" argname="SecondsPerCycle *((double )all_grids -> cycles . MGBuild)"/>
</funccall>
<funccall linenum="111" name="" origname="printf" module="unknown">
<arg paramname="__format" argname="" Total time in MGSolve %12.6f seconds\n""/>
<arg paramname="" argname="scale *((double )all_grids -> cycles . MGSolve)"/>
</funccall>
<funccall linenum="112" name="" origname="printf" module="unknown">
<arg paramname="__format" argname="" number of v-cycles %12d\n""/>
<arg paramname="" argname="all_grids -> levels[0] -> vcycles_from_this_level / all_grids -> MGSolves_performed"/>
</funccall>
<funccall linenum="113" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""Bottom solver iterations %12d\n""/>
<arg paramname="" argname="all_grids -> levels[num_levels - 1] -> Krylov_iterations / all_grids -> MGSolves_performed"/>
</funccall>
<funccall linenum="117" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="119" name="" origname="printf" module="unknown">
<arg paramname="__format" argname="" Performance %12.3e DOF/s\n""/>
<arg paramname="" argname="numDOF /(scale *((double )all_grids -> cycles . MGSolve))"/>
</funccall>
<funccall linenum="120" name="" origname="printf" module="unknown">
</funccall>
<funccall linenum="120" name="" origname="fflush" module="unknown">
<arg paramname="__stream" argname="stdout"/>
</funccall>
</function>
<function name="MGResetTimers">
<nonlocal name="all_grids"/>
<loop linenum="127" loopvar="level" lowerbound="0" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  level)" reads="0" writes="0"/>
</array>
<funccall linenum="127" name="" origname="reset_level_timers" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
</funccall>
</loop>
</function>
<function name="MGSolve">
<nonlocal name="stdout"/>
<nonlocal name="all_grids"/>
<if linenum="973" conditional="!all_grids -> levels[0] -> active;" adds="0" multiplies="0" divides="0" specials="0">
</if>
<funccall linenum="982" name="" origname="MPI_Wtime" module="unknown">
</funccall>
<if linenum="984" conditional="all_grids -> levels[0] -> my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="984" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<funccall linenum="985" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="990" conditional="dtol > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="F_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="norm_of_DinvF" datatype="double" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="()" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="991" name="" origname="mul_vectors" module="unknown">
<arg paramname="level" argname="all_grids -> levels[0]"/>
<arg paramname="id_c" argname="0"/>
<arg paramname="scale" argname="1.0"/>
<arg paramname="id_a" argname="F_id"/>
<arg paramname="id_b" argname="9"/>
</funccall>
<funccall linenum="992" name="" origname="norm" module="unknown">
<arg paramname="level" argname="all_grids -> levels[0]"/>
<arg paramname="id_a" argname="0"/>
</funccall>
</if>
<if linenum="994" conditional="rtol > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="F_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="norm_of_F" datatype="double" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="()" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="994" name="" origname="norm" module="unknown">
<arg paramname="level" argname="all_grids -> levels[0]"/>
<arg paramname="id_a" argname="F_id"/>
</funccall>
</if>
<funccall linenum="998" name="" origname="zero_vector" module="unknown">
<arg paramname="level" argname="all_grids -> levels[0]"/>
<arg paramname="id_a" argname="e_id"/>
</funccall>
<funccall linenum="999" name="" origname="scale_vector" module="unknown">
<arg paramname="level" argname="all_grids -> levels[0]"/>
<arg paramname="id_c" argname="R_id"/>
<arg paramname="scale_a" argname="1.0"/>
<arg paramname="id_a" argname="F_id"/>
</funccall>
<loop linenum="1003" loopvar="v" lowerbound="0" upperbound="maxVCycles" stride="1" adds="0" multiplies="0" divides="1" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="type" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="alpha_is_zero" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vcycles_from_this_level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="F_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="dtol" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="rtol" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="e_id" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="R_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="v" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="maxVCycles" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="norm_of_F" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="norm_of_residual" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="()" dependentloopvar="( )" reads="5" writes="0"/>
</array>
<funccall linenum="1008" name="" origname="MGVCycle" module="unknown">
<arg paramname="all_grids" argname="all_grids"/>
<arg paramname="e_id" argname="e_id"/>
<arg paramname="R_id" argname="R_id"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
<arg paramname="level" argname="level"/>
</funccall>
<funccall linenum="1011" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="1012" conditional="all_grids -> levels[level] -> boundary_condition . type == 0 &&(a == 0 || all_grids -> levels[level] -> alpha_is_zero == 1);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="e_id" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="average_value_of_e" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="1014" name="" origname="mean" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="id_a" argname="e_id"/>
</funccall>
<funccall linenum="1015" name="" origname="shift_vector" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="id_c" argname="e_id"/>
<arg paramname="id_a" argname="e_id"/>
<arg paramname="shift_a" argname="-average_value_of_e"/>
</funccall>
</if>
<funccall linenum="1017" name="" origname="residual" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="res_id" argname="0"/>
<arg paramname="x_id" argname="e_id"/>
<arg paramname="rhs_id" argname="F_id"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
</funccall>
<if linenum="1018" conditional="dtol > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="1018" name="" origname="mul_vectors" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="id_c" argname="0"/>
<arg paramname="scale" argname="1.0"/>
<arg paramname="id_a" argname="0"/>
<arg paramname="id_b" argname="9"/>
</funccall>
</if>
<funccall linenum="1019" name="" origname="norm" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="id_a" argname="0"/>
</funccall>
<funccall linenum="1020" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="1022" conditional="all_grids -> levels[level] -> my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="rtol" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="v" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="1023" conditional="v > 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="1023" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<if linenum="1024" conditional="rtol > 0;" adds="0" multiplies="0" divides="1" specials="0">
<scalar name="v" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="norm_of_F" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="norm_of_residual" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<funccall linenum="1024" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<else linenum="1025" adds="0" multiplies="0" divides="1" specials="0">
<scalar name="v" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="norm_of_DinvF" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="norm_of_residual" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<funccall linenum="1025" name="" origname="fprintf" module="unknown">
</funccall>
</else>
</if>
<if linenum="1027" conditional="norm_of_residual / norm_of_F < rtol;" adds="0" multiplies="0" divides="0" specials="0">
</if>
<if linenum="1028" conditional="norm_of_residual < dtol;" adds="0" multiplies="0" divides="0" specials="0">
</if>
</loop>
<funccall linenum="1031" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="1034" conditional="all_grids -> levels[0] -> my_rank == 0;" adds="1" multiplies="0" divides="0" specials="0">
<scalar name="MG_Start_Time" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="1034" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stdout"/>
<arg paramname="__format" argname=""done(%f seconds)\n""/>
<arg paramname="" argname="MPI_Wtime() - MG_Start_Time"/>
</funccall>
<funccall linenum="1034" name="" origname="MPI_Wtime" module="unknown">
</funccall>
</if>
</function>
<function name="MGVCycle">
<nonlocal name="all_grids"/>
<if linenum="940" conditional="!all_grids -> levels[level] -> active;" adds="0" multiplies="0" divides="0" specials="0">
</if>
<if linenum="944" conditional="level == all_grids -> num_levels - 1;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="e_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="R_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="1" writes="0"/>
</array>
<funccall linenum="945" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="946" name="" origname="IterativeSolver" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="u_id" argname="e_id"/>
<arg paramname="f_id" argname="R_id"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
<arg paramname="desired_reduction_in_norm" argname="1e-3"/>
</funccall>
<funccall linenum="947" name="" origname="CycleTime" module="unknown">
</funccall>
</if>
<funccall linenum="952" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="953" name="" origname="smooth" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="phi_id" argname="e_id"/>
<arg paramname="rhs_id" argname="R_id"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
</funccall>
<funccall linenum="954" name="" origname="residual" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="res_id" argname="0"/>
<arg paramname="x_id" argname="e_id"/>
<arg paramname="rhs_id" argname="R_id"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
</funccall>
<funccall linenum="955" name="" origname="restriction" module="unknown">
<arg paramname="level_c" argname="all_grids -> levels[level + 1]"/>
<arg paramname="id_c" argname="R_id"/>
<arg paramname="level_f" argname="all_grids -> levels[level]"/>
<arg paramname="id_f" argname="0"/>
<arg paramname="restrictionType" argname="0"/>
</funccall>
<funccall linenum="956" name="" origname="zero_vector" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level + 1]"/>
<arg paramname="id_a" argname="e_id"/>
</funccall>
<funccall linenum="957" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="960" name="" origname="MGVCycle" module="unknown">
<arg paramname="all_grids" argname="all_grids"/>
<arg paramname="e_id" argname="e_id"/>
<arg paramname="R_id" argname="R_id"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
<arg paramname="level" argname="level + 1"/>
</funccall>
<funccall linenum="963" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="964" name="" origname="interpolation_vcycle" module="unknown">
<arg paramname="level_f" argname="all_grids -> levels[level]"/>
<arg paramname="id_f" argname="e_id"/>
<arg paramname="prescale_f" argname="1.0"/>
<arg paramname="level_c" argname="all_grids -> levels[level + 1]"/>
<arg paramname="id_c" argname="e_id"/>
</funccall>
<funccall linenum="965" name="" origname="smooth" module="unknown">
<arg paramname="level" argname="all_grids -> levels[level]"/>
<arg paramname="phi_id" argname="e_id"/>
<arg paramname="rhs_id" argname="R_id"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
</funccall>
<funccall linenum="966" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="add_vectors">
<nonlocal name="level"/>
<funccall linenum="141" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="146" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_a" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_b" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
</array>
<loop linenum="162" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="163" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="164" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="1" multiplies="2" divides="0" specials="0">
<scalar name="scale_a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="scale_b" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="4" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="4" writes="0"/>
<scalar name="grid_c" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="grid_a" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="grid_b" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="169" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="apply_BCs">
</function>
<function name="build_interpolation">
<local name="fineRanks"/>
<local name="fineBoxes"/>
<local name="all_send_buffers"/>
<local name="coarseRanks"/>
<local name="coarseBoxes"/>
<local name="all_recv_buffers"/>
<nonlocal name="stderr"/>
<nonlocal name="all_grids"/>
<loop linenum="137" loopvar="level" lowerbound="0" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="17" writes="1"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(0 ,-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  level)" reads="13" writes="0"/>
</array>
<if linenum="153" conditional="level > 0 && all_grids -> levels[level] -> num_my_boxes > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="14" writes="0"/>
<scalar name="numFineBoxes" datatype="int" isConstant="false" accesstype="readwrite" reads="3" writes="1"/>
<scalar name="numFineBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="fineBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numFineRanks" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="6" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
</array>
<funccall linenum="159" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineBoxes * sizeof(int )"/>
</funccall>
<funccall linenum="160" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineBoxes * sizeof(RP_type )"/>
</funccall>
<loop linenum="165" loopvar="coarseBox" lowerbound="0" upperbound="all_grids -> levels[level] -> num_my_boxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="global_box_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level  coarseBox, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="4" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="8" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<loop linenum="171" loopvar="bk" lowerbound="0" upperbound="all_grids -> levels[level - 1] -> boxes_in . k / all_grids -> levels[level] -> boxes_in . k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="bk" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<loop linenum="172" loopvar="bj" lowerbound="0" upperbound="all_grids -> levels[level - 1] -> boxes_in . j / all_grids -> levels[level] -> boxes_in . j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="bj" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<loop linenum="173" loopvar="bi" lowerbound="0" upperbound="all_grids -> levels[level - 1] -> boxes_in . i / all_grids -> levels[level] -> boxes_in . i" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="sendRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="27" writes="0"/>
<scalar name="numFineBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="bi" datatype="int" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<scalar name="bj" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="bk" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="coarseBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="coarseBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="coarseBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fineBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 ,-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="8" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="18" writes="0"/>
</array>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox bk bk bk bk bk bk bk bk bk bj bj bj bj bj bj bj bj bj bi bi bi bi bi bi bi bi bi level level )" reads="0" writes="9"/>
</array>
<loop linenum="178" loopvar="f" lowerbound="0" upperbound="all_grids -> levels[level - 1] -> num_my_boxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="global_box_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="f" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level  f, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<if linenum="178" conditional="all_grids -> levels[level - 1] -> my_boxes[f] . global_box_id == fineBoxID;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
</loop>
<if linenum="189" conditional="all_grids -> levels[level - 1] -> rank_of_box[fineBoxID] != all_grids -> levels[level] -> my_rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numFineBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<array name="fineRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
</if>
<else linenum="191" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numFineBoxesLocal" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</else>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="195" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="fineBoxes"/>
<arg paramname="__nmemb" argname="numFineBoxes"/>
<arg paramname="__size" argname="sizeof(RP_type )"/>
<arg paramname="__compar" argname="qsortRP"/>
</funccall>
<funccall linenum="197" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="fineRanks"/>
<arg paramname="__nmemb" argname="numFineBoxesRemote"/>
<arg paramname="__size" argname="sizeof(int )"/>
<arg paramname="__compar" argname="qsortInt"/>
</funccall>
<loop linenum="200" loopvar="neighbor" lowerbound="0" upperbound="numFineBoxesRemote" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numFineBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="fineRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<if linenum="200" conditional="fineRanks[neighbor] != _rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numFineRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="fineRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="2" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
</if>
</loop>
<funccall linenum="204" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineRanks * sizeof(int )"/>
</funccall>
<funccall linenum="205" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineRanks * sizeof(int )"/>
</funccall>
<funccall linenum="206" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineRanks * sizeof(double *)"/>
</funccall>
<if linenum="207" conditional="numFineRanks > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
</array>
<if linenum="208" conditional="all_grids -> levels[level] -> interpolation . send_ranks ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="208" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->interpolation.send_ranks\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="208" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="209" conditional="all_grids -> levels[level] -> interpolation . send_sizes ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="209" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->interpolation.send_sizes\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="209" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="210" conditional="all_grids -> levels[level] -> interpolation . send_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="210" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->interpolation.send_buffers\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="210" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="214" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="(numFineBoxesRemote * elementSize) * sizeof(double )"/>
</funccall>
<if linenum="215" conditional="numFineBoxesRemote * elementSize > 0;" adds="0" multiplies="0" divides="0" specials="0">
<if linenum="216" conditional="all_send_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="216" name="" origname="fprintf" module="unknown">
</funccall>
<funccall linenum="216" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="217" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="all_send_buffers"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="(numFineBoxesRemote * elementSize) * sizeof(double )"/>
</funccall>
<loop linenum="221" loopvar="neighbor" lowerbound="0" upperbound="numFineRanks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="numFineRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="fineRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
</array>
<loop linenum="225" loopvar="fineBox" lowerbound="0" upperbound="numFineBoxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numFineBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="fineRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  fineBox)" reads="1" writes="0"/>
</array>
<if linenum="225" conditional="fineBoxes[fineBox] . recvRank == fineRanks[neighbor];" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="12" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  fineBox)" reads="0" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  fineBoxlevel level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level level level level level level level  fineBox)" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
</array>
<funccall linenum="227" name="" origname="append_block_to_list" module="unknown">
<arg paramname="blocks" argname="&all_grids -> levels[level] -> interpolation . blocks[0]"/>
<arg paramname="allocated_blocks" argname="&all_grids -> levels[level] -> interpolation . allocated_blocks[0]"/>
<arg paramname="num_blocks" argname="&all_grids -> levels[level] -> interpolation . num_blocks[0]"/>
<arg paramname="dim_i" argname="all_grids -> levels[level - 1] -> box_dim / 2"/>
<arg paramname="dim_j" argname="all_grids -> levels[level - 1] -> box_dim / 2"/>
<arg paramname="dim_k" argname="all_grids -> levels[level - 1] -> box_dim / 2"/>
<arg paramname="read_box" argname="fineBoxes[fineBox] . sendBox"/>
<arg paramname="read_ptr" argname="((void *)0)"/>
<arg paramname="read_i" argname="fineBoxes[fineBox] . i"/>
<arg paramname="read_j" argname="fineBoxes[fineBox] . j"/>
<arg paramname="read_k" argname="fineBoxes[fineBox] . k"/>
<arg paramname="read_jStride" argname="all_grids -> levels[level] -> my_boxes[fineBoxes[fineBox] . sendBox] . jStride"/>
<arg paramname="read_kStride" argname="all_grids -> levels[level] -> my_boxes[fineBoxes[fineBox] . sendBox] . kStride"/>
<arg paramname="read_scale" argname="1"/>
<arg paramname="write_box" argname="-1"/>
<arg paramname="write_ptr" argname="all_grids -> levels[level] -> interpolation . send_buffers[neighbor]"/>
<arg paramname="write_i" argname="offset"/>
<arg paramname="write_j" argname="0"/>
<arg paramname="write_k" argname="0"/>
<arg paramname="write_jStride" argname="all_grids -> levels[level - 1] -> box_dim"/>
<arg paramname="write_kStride" argname="all_grids -> levels[level - 1] -> box_dim * all_grids -> levels[level - 1] -> box_dim"/>
<arg paramname="write_scale" argname="2"/>
<arg paramname="my_blockcopy_tile_i" argname="10000"/>
<arg paramname="my_blockcopy_tile_j" argname="8"/>
<arg paramname="my_blockcopy_tile_k" argname="8"/>
<arg paramname="subtype" argname="0"/>
</funccall>
</if>
</loop>
</loop>
<loop linenum="260" loopvar="fineBox" lowerbound="0" upperbound="numFineBoxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numFineBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  fineBox)" reads="1" writes="0"/>
</array>
<if linenum="260" conditional="fineBoxes[fineBox] . recvRank == all_grids -> my_rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,-1 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  fineBoxlevel level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level level level level level level level  fineBox)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  fineBoxlevel level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level level level level level level level  fineBox)" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
</array>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  fineBox)" reads="0" writes="0"/>
</array>
<funccall linenum="262" name="" origname="append_block_to_list" module="unknown">
<arg paramname="blocks" argname="&all_grids -> levels[level] -> interpolation . blocks[1]"/>
<arg paramname="allocated_blocks" argname="&all_grids -> levels[level] -> interpolation . allocated_blocks[1]"/>
<arg paramname="num_blocks" argname="&all_grids -> levels[level] -> interpolation . num_blocks[1]"/>
<arg paramname="dim_i" argname="all_grids -> levels[level - 1] -> box_dim / 2"/>
<arg paramname="dim_j" argname="all_grids -> levels[level - 1] -> box_dim / 2"/>
<arg paramname="dim_k" argname="all_grids -> levels[level - 1] -> box_dim / 2"/>
<arg paramname="read_box" argname="fineBoxes[fineBox] . sendBox"/>
<arg paramname="read_ptr" argname="((void *)0)"/>
<arg paramname="read_i" argname="fineBoxes[fineBox] . i"/>
<arg paramname="read_j" argname="fineBoxes[fineBox] . j"/>
<arg paramname="read_k" argname="fineBoxes[fineBox] . k"/>
<arg paramname="read_jStride" argname="all_grids -> levels[level] -> my_boxes[fineBoxes[fineBox] . sendBox] . jStride"/>
<arg paramname="read_kStride" argname="all_grids -> levels[level] -> my_boxes[fineBoxes[fineBox] . sendBox] . kStride"/>
<arg paramname="read_scale" argname="1"/>
<arg paramname="write_box" argname="fineBoxes[fineBox] . recvBox"/>
<arg paramname="write_ptr" argname="((void *)0)"/>
<arg paramname="write_i" argname="0"/>
<arg paramname="write_j" argname="0"/>
<arg paramname="write_k" argname="0"/>
<arg paramname="write_jStride" argname="all_grids -> levels[level - 1] -> my_boxes[fineBoxes[fineBox] . recvBox] . jStride"/>
<arg paramname="write_kStride" argname="all_grids -> levels[level - 1] -> my_boxes[fineBoxes[fineBox] . recvBox] . kStride"/>
<arg paramname="write_scale" argname="2"/>
<arg paramname="my_blockcopy_tile_i" argname="10000"/>
<arg paramname="my_blockcopy_tile_j" argname="8"/>
<arg paramname="my_blockcopy_tile_k" argname="8"/>
<arg paramname="subtype" argname="0"/>
</funccall>
</if>
</loop>
<funccall linenum="291" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="fineBoxes"/>
</funccall>
<funccall linenum="292" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="fineRanks"/>
</funccall>
</if>
<if linenum="298" conditional="level < all_grids -> num_levels - 1 && all_grids -> levels[level] -> num_my_boxes > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readwrite" reads="7" writes="1"/>
<scalar name="numCoarseRanks" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="9" writes="0"/>
</array>
<funccall linenum="302" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseBoxes * sizeof(int )"/>
</funccall>
<funccall linenum="303" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseBoxes * sizeof(RP_type )"/>
</funccall>
<loop linenum="306" loopvar="fineBox" lowerbound="0" upperbound="all_grids -> levels[level] -> num_my_boxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="global_box_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="19" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="fineBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level  fineBox, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="4" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="11" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="7" writes="0"/>
</array>
<if linenum="315" conditional="all_grids -> levels[level] -> my_rank != all_grids -> levels[level + 1] -> rank_of_box[coarseBoxID];" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="sendRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="2" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="2" writes="0"/>
</array>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level fineBox fineBox fineBox fineBox fineBox fineBox fineBox fineBox fineBox fineBox fineBox fineBox level level )" reads="0" writes="6"/>
</array>
<array name="coarseRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level )" reads="0" writes="1"/>
</array>
</if>
</loop>
<funccall linenum="328" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="coarseBoxes"/>
<arg paramname="__nmemb" argname="numCoarseBoxes"/>
<arg paramname="__size" argname="sizeof(RP_type )"/>
<arg paramname="__compar" argname="qsortRP"/>
</funccall>
<funccall linenum="330" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="coarseRanks"/>
<arg paramname="__nmemb" argname="numCoarseBoxes"/>
<arg paramname="__size" argname="sizeof(int )"/>
<arg paramname="__compar" argname="qsortInt"/>
</funccall>
<loop linenum="333" loopvar="neighbor" lowerbound="0" upperbound="numCoarseBoxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="coarseRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<if linenum="333" conditional="coarseRanks[neighbor] != _rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numCoarseRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="coarseRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="2" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
</if>
</loop>
<funccall linenum="337" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseRanks * sizeof(int )"/>
</funccall>
<funccall linenum="338" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseRanks * sizeof(int )"/>
</funccall>
<funccall linenum="339" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseRanks * sizeof(double *)"/>
</funccall>
<if linenum="340" conditional="numCoarseRanks > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
</array>
<if linenum="341" conditional="all_grids -> levels[level] -> interpolation . recv_ranks ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="341" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->interpolation.recv_ranks\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="341" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="342" conditional="all_grids -> levels[level] -> interpolation . recv_sizes ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="342" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->interpolation.recv_sizes\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="342" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="343" conditional="all_grids -> levels[level] -> interpolation . recv_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="343" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->interpolation.recv_buffers\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="343" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="347" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="(numCoarseBoxes * elementSize) * sizeof(double )"/>
</funccall>
<if linenum="348" conditional="numCoarseBoxes * elementSize > 0;" adds="0" multiplies="0" divides="0" specials="0">
<if linenum="349" conditional="all_recv_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="349" name="" origname="fprintf" module="unknown">
</funccall>
<funccall linenum="349" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="350" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="all_recv_buffers"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="(numCoarseBoxes * elementSize) * sizeof(double )"/>
</funccall>
<loop linenum="354" loopvar="neighbor" lowerbound="0" upperbound="numCoarseRanks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="numCoarseRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="coarseRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
</array>
<loop linenum="358" loopvar="coarseBox" lowerbound="0" upperbound="numCoarseBoxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="sendRank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="coarseRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level  coarseBox)" reads="1" writes="0"/>
</array>
<if linenum="358" conditional="coarseBoxes[coarseBox] . sendRank == coarseRanks[neighbor];" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="12" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level  coarseBox)" reads="0" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level  coarseBoxlevel level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level  coarseBox)" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
</array>
<funccall linenum="360" name="" origname="append_block_to_list" module="unknown">
<arg paramname="blocks" argname="&all_grids -> levels[level] -> interpolation . blocks[2]"/>
<arg paramname="allocated_blocks" argname="&all_grids -> levels[level] -> interpolation . allocated_blocks[2]"/>
<arg paramname="num_blocks" argname="&all_grids -> levels[level] -> interpolation . num_blocks[2]"/>
<arg paramname="dim_i" argname="all_grids -> levels[level] -> box_dim"/>
<arg paramname="dim_j" argname="all_grids -> levels[level] -> box_dim"/>
<arg paramname="dim_k" argname="all_grids -> levels[level] -> box_dim"/>
<arg paramname="read_box" argname="-1"/>
<arg paramname="read_ptr" argname="all_grids -> levels[level] -> interpolation . recv_buffers[neighbor]"/>
<arg paramname="read_i" argname="offset"/>
<arg paramname="read_j" argname="0"/>
<arg paramname="read_k" argname="0"/>
<arg paramname="read_jStride" argname="all_grids -> levels[level] -> box_dim"/>
<arg paramname="read_kStride" argname="all_grids -> levels[level] -> box_dim * all_grids -> levels[level] -> box_dim"/>
<arg paramname="read_scale" argname="1"/>
<arg paramname="write_box" argname="coarseBoxes[coarseBox] . recvBox"/>
<arg paramname="write_ptr" argname="((void *)0)"/>
<arg paramname="write_i" argname="0"/>
<arg paramname="write_j" argname="0"/>
<arg paramname="write_k" argname="0"/>
<arg paramname="write_jStride" argname="all_grids -> levels[level] -> my_boxes[coarseBoxes[coarseBox] . recvBox] . jStride"/>
<arg paramname="write_kStride" argname="all_grids -> levels[level] -> my_boxes[coarseBoxes[coarseBox] . recvBox] . kStride"/>
<arg paramname="write_scale" argname="1"/>
<arg paramname="my_blockcopy_tile_i" argname="10000"/>
<arg paramname="my_blockcopy_tile_j" argname="8"/>
<arg paramname="my_blockcopy_tile_k" argname="8"/>
<arg paramname="subtype" argname="0"/>
</funccall>
</if>
</loop>
</loop>
<funccall linenum="393" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="coarseBoxes"/>
</funccall>
<funccall linenum="394" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="coarseRanks"/>
</funccall>
</if>
</loop>
<loop linenum="408" loopvar="level" lowerbound="0" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requests" datatype="MPI_Request * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="status" datatype="MPI_Status * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level  level)" reads="2" writes="0"/>
</array>
<if linenum="411" conditional="level < all_grids -> num_levels - 1;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="requests" datatype="MPI_Request * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="status" datatype="MPI_Status * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="nMessages" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<funccall linenum="414" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="nMessages * sizeof(MPI_Request )"/>
</funccall>
<funccall linenum="415" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="nMessages * sizeof(MPI_Status )"/>
</funccall>
</if>
</loop>
</function>
<function name="build_restriction">
<local name="coarseRanks"/>
<local name="coarseBoxes"/>
<local name="all_send_buffers"/>
<local name="fineRanks"/>
<local name="fineBoxes"/>
<local name="all_recv_buffers"/>
<nonlocal name="stderr"/>
<nonlocal name="all_grids"/>
<loop linenum="425" loopvar="level" lowerbound="0" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="11" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="17" writes="1"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(0 ,1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  level)" reads="12" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level  level)" reads="9" writes="2"/>
</array>
<if linenum="441" conditional="level < all_grids -> num_levels - 1 && all_grids -> levels[level] -> num_my_boxes > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="12" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="23" writes="0"/>
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readwrite" reads="6" writes="1"/>
<scalar name="numCoarseBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numCoarseRanks" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="restrict_dim_i" datatype="int" isConstant="false" accesstype="writeread" reads="1" writes="4"/>
<scalar name="restrict_dim_j" datatype="int" isConstant="false" accesstype="writeread" reads="1" writes="4"/>
<scalar name="restrict_dim_k" datatype="int" isConstant="false" accesstype="writeread" reads="1" writes="4"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="12" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="4"/>
</array>
<funccall linenum="448" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseBoxes * sizeof(int )"/>
</funccall>
<funccall linenum="449" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseBoxes * sizeof(RP_type )"/>
</funccall>
<loop linenum="454" loopvar="fineBox" lowerbound="0" upperbound="all_grids -> levels[level] -> num_my_boxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="global_box_id" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="sendRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="46" writes="0"/>
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="writeread" reads="11" writes="1"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fineBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fineBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="coarseBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level  fineBox, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="8" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="28" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="18" writes="0"/>
</array>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level fineBox fineBox fineBox fineBox fineBox fineBox fineBox fineBox fineBox level level )" reads="0" writes="9"/>
</array>
<loop linenum="463" loopvar="c" lowerbound="0" upperbound="all_grids -> levels[level + 1] -> num_my_boxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="global_box_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="c" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level  c, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<if linenum="463" conditional="all_grids -> levels[level + 1] -> my_boxes[c] . global_box_id == coarseBoxID;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
</loop>
<if linenum="474" conditional="all_grids -> levels[level] -> my_rank != all_grids -> levels[level + 1] -> rank_of_box[coarseBoxID];" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numCoarseBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<array name="coarseRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
</if>
<else linenum="476" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numCoarseBoxesLocal" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</else>
</loop>
<funccall linenum="480" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="coarseBoxes"/>
<arg paramname="__nmemb" argname="numCoarseBoxes"/>
<arg paramname="__size" argname="sizeof(RP_type )"/>
<arg paramname="__compar" argname="qsortRP"/>
</funccall>
<funccall linenum="482" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="coarseRanks"/>
<arg paramname="__nmemb" argname="numCoarseBoxesRemote"/>
<arg paramname="__size" argname="sizeof(int )"/>
<arg paramname="__compar" argname="qsortInt"/>
</funccall>
<loop linenum="485" loopvar="neighbor" lowerbound="0" upperbound="numCoarseBoxesRemote" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numCoarseBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="coarseRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<if linenum="485" conditional="coarseRanks[neighbor] != _rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numCoarseRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="coarseRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="2" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
</if>
</loop>
<funccall linenum="489" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseRanks * sizeof(int )"/>
</funccall>
<funccall linenum="490" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseRanks * sizeof(int )"/>
</funccall>
<funccall linenum="491" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numCoarseRanks * sizeof(double *)"/>
</funccall>
<if linenum="492" conditional="numCoarseRanks > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
</array>
<if linenum="493" conditional="all_grids -> levels[level] -> restriction[restrictionType] . send_ranks ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="493" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->restriction[restrictionType].send_ranks\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="493" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="494" conditional="all_grids -> levels[level] -> restriction[restrictionType] . send_sizes ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="494" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->restriction[restrictionType].send_sizes\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="494" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="495" conditional="all_grids -> levels[level] -> restriction[restrictionType] . send_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="495" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->restriction[restrictionType].send_buffers\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="495" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="518" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="(numCoarseBoxes * elementSize) * sizeof(double )"/>
</funccall>
<if linenum="519" conditional="numCoarseBoxes * elementSize > 0;" adds="0" multiplies="0" divides="0" specials="0">
<if linenum="520" conditional="all_send_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="520" name="" origname="fprintf" module="unknown">
</funccall>
<funccall linenum="520" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="521" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="all_send_buffers"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="(numCoarseBoxes * elementSize) * sizeof(double )"/>
</funccall>
<loop linenum="524" loopvar="neighbor" lowerbound="0" upperbound="numCoarseRanks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="numCoarseRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="coarseRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
</array>
<loop linenum="528" loopvar="coarseBox" lowerbound="0" upperbound="numCoarseBoxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="coarseRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  coarseBox)" reads="1" writes="0"/>
</array>
<if linenum="528" conditional="coarseBoxes[coarseBox] . recvRank == coarseRanks[neighbor];" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrict_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="restrict_dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="restrict_dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  coarseBox)" reads="0" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  coarseBoxlevel level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level level level level level level level  coarseBox)" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
</array>
<funccall linenum="530" name="" origname="append_block_to_list" module="unknown">
<arg paramname="blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . blocks[0]"/>
<arg paramname="allocated_blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . allocated_blocks[0]"/>
<arg paramname="num_blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . num_blocks[0]"/>
<arg paramname="dim_i" argname="restrict_dim_i"/>
<arg paramname="dim_j" argname="restrict_dim_j"/>
<arg paramname="dim_k" argname="restrict_dim_k"/>
<arg paramname="read_box" argname="coarseBoxes[coarseBox] . sendBox"/>
<arg paramname="read_ptr" argname="((void *)0)"/>
<arg paramname="read_i" argname="0"/>
<arg paramname="read_j" argname="0"/>
<arg paramname="read_k" argname="0"/>
<arg paramname="read_jStride" argname="all_grids -> levels[level] -> my_boxes[coarseBoxes[coarseBox] . sendBox] . jStride"/>
<arg paramname="read_kStride" argname="all_grids -> levels[level] -> my_boxes[coarseBoxes[coarseBox] . sendBox] . kStride"/>
<arg paramname="read_scale" argname="2"/>
<arg paramname="write_box" argname="-1"/>
<arg paramname="write_ptr" argname="all_grids -> levels[level] -> restriction[restrictionType] . send_buffers[neighbor]"/>
<arg paramname="write_i" argname="offset"/>
<arg paramname="write_j" argname="0"/>
<arg paramname="write_k" argname="0"/>
<arg paramname="write_jStride" argname="restrict_dim_i"/>
<arg paramname="write_kStride" argname="restrict_dim_i * restrict_dim_j"/>
<arg paramname="write_scale" argname="1"/>
<arg paramname="my_blockcopy_tile_i" argname="10000"/>
<arg paramname="my_blockcopy_tile_j" argname="8"/>
<arg paramname="my_blockcopy_tile_k" argname="8"/>
<arg paramname="subtype" argname="0"/>
</funccall>
</if>
</loop>
</loop>
<loop linenum="566" loopvar="coarseBox" lowerbound="0" upperbound="numCoarseBoxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numCoarseBoxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  coarseBox)" reads="1" writes="0"/>
</array>
<if linenum="566" conditional="coarseBoxes[coarseBox] . recvRank == all_grids -> levels[level + 1] -> my_rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="restrict_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrict_dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrict_dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,1 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  coarseBoxlevel level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level level level level level level level  coarseBox)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  coarseBoxlevel level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level level level level level level level  coarseBox)" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
</array>
<array name="coarseBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  coarseBox)" reads="0" writes="0"/>
</array>
<funccall linenum="568" name="" origname="append_block_to_list" module="unknown">
<arg paramname="blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . blocks[1]"/>
<arg paramname="allocated_blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . allocated_blocks[1]"/>
<arg paramname="num_blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . num_blocks[1]"/>
<arg paramname="dim_i" argname="restrict_dim_i"/>
<arg paramname="dim_j" argname="restrict_dim_j"/>
<arg paramname="dim_k" argname="restrict_dim_k"/>
<arg paramname="read_box" argname="coarseBoxes[coarseBox] . sendBox"/>
<arg paramname="read_ptr" argname="((void *)0)"/>
<arg paramname="read_i" argname="0"/>
<arg paramname="read_j" argname="0"/>
<arg paramname="read_k" argname="0"/>
<arg paramname="read_jStride" argname="all_grids -> levels[level] -> my_boxes[coarseBoxes[coarseBox] . sendBox] . jStride"/>
<arg paramname="read_kStride" argname="all_grids -> levels[level] -> my_boxes[coarseBoxes[coarseBox] . sendBox] . kStride"/>
<arg paramname="read_scale" argname="2"/>
<arg paramname="write_box" argname="coarseBoxes[coarseBox] . recvBox"/>
<arg paramname="write_ptr" argname="((void *)0)"/>
<arg paramname="write_i" argname="coarseBoxes[coarseBox] . i"/>
<arg paramname="write_j" argname="coarseBoxes[coarseBox] . j"/>
<arg paramname="write_k" argname="coarseBoxes[coarseBox] . k"/>
<arg paramname="write_jStride" argname="all_grids -> levels[level + 1] -> my_boxes[coarseBoxes[coarseBox] . recvBox] . jStride"/>
<arg paramname="write_kStride" argname="all_grids -> levels[level + 1] -> my_boxes[coarseBoxes[coarseBox] . recvBox] . kStride"/>
<arg paramname="write_scale" argname="1"/>
<arg paramname="my_blockcopy_tile_i" argname="10000"/>
<arg paramname="my_blockcopy_tile_j" argname="8"/>
<arg paramname="my_blockcopy_tile_k" argname="8"/>
<arg paramname="subtype" argname="0"/>
</funccall>
</if>
</loop>
<funccall linenum="599" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="coarseBoxes"/>
</funccall>
<funccall linenum="600" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="coarseRanks"/>
</funccall>
</if>
<if linenum="608" conditional="level > 0 && all_grids -> levels[level] -> num_my_boxes > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="12" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="23" writes="0"/>
<scalar name="numFineBoxesMax" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="numFineBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="numFineRanks" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="restrict_dim_i" datatype="int" isConstant="false" accesstype="writeread" reads="1" writes="4"/>
<scalar name="restrict_dim_j" datatype="int" isConstant="false" accesstype="writeread" reads="1" writes="4"/>
<scalar name="restrict_dim_k" datatype="int" isConstant="false" accesstype="writeread" reads="1" writes="4"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="9" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="15" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="4"/>
</array>
<funccall linenum="614" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineBoxesMax * sizeof(int )"/>
</funccall>
<funccall linenum="615" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineBoxesMax * sizeof(RP_type )"/>
</funccall>
<loop linenum="618" loopvar="coarseBox" lowerbound="0" upperbound="all_grids -> levels[level] -> num_my_boxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="global_box_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level  coarseBox, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="4" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="8" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<loop linenum="624" loopvar="bk" lowerbound="0" upperbound="all_grids -> levels[level - 1] -> boxes_in . k / all_grids -> levels[level] -> boxes_in . k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="bk" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<loop linenum="625" loopvar="bj" lowerbound="0" upperbound="all_grids -> levels[level - 1] -> boxes_in . j / all_grids -> levels[level] -> boxes_in . j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="bj" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<loop linenum="626" loopvar="bi" lowerbound="0" upperbound="all_grids -> levels[level - 1] -> boxes_in . i / all_grids -> levels[level] -> boxes_in . i" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="13" writes="0"/>
<scalar name="bi" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<scalar name="bj" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="bk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="4" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="7" writes="0"/>
</array>
<if linenum="631" conditional="all_grids -> levels[level - 1] -> rank_of_box[fineBoxID] != all_grids -> levels[level] -> my_rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box_dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="sendRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="sendBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvRank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBoxID" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="numFineBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="11" writes="0"/>
<scalar name="coarseBox" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="bi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="bj" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="bk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="coarseBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="fineBoxID" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 ,-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="2" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="5" writes="0"/>
</array>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox coarseBox bk bk bk bk bk bk bk bk bk bj bj bj bj bj bj bj bj bj bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi bi )" reads="0" writes="9"/>
</array>
<array name="fineRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
</if>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="647" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="fineBoxes"/>
<arg paramname="__nmemb" argname="numFineBoxesRemote"/>
<arg paramname="__size" argname="sizeof(RP_type )"/>
<arg paramname="__compar" argname="qsortRP"/>
</funccall>
<funccall linenum="649" name="" origname="qsort" module="unknown">
<arg paramname="__base" argname="fineRanks"/>
<arg paramname="__nmemb" argname="numFineBoxesRemote"/>
<arg paramname="__size" argname="sizeof(int )"/>
<arg paramname="__compar" argname="qsortInt"/>
</funccall>
<loop linenum="652" loopvar="neighbor" lowerbound="0" upperbound="numFineBoxesRemote" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numFineBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="fineRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<if linenum="652" conditional="fineRanks[neighbor] != _rank;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="numFineRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="_rank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="fineRanks" component="" datatype="int" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="2" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="1"/>
</array>
</if>
</loop>
<funccall linenum="656" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineRanks * sizeof(int )"/>
</funccall>
<funccall linenum="657" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineRanks * sizeof(int )"/>
</funccall>
<funccall linenum="658" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="numFineRanks * sizeof(double *)"/>
</funccall>
<if linenum="659" conditional="numFineRanks > 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
</array>
<if linenum="660" conditional="all_grids -> levels[level] -> restriction[restrictionType] . recv_ranks ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="660" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->restriction[restrictionType].recv_ranks \n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="660" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="661" conditional="all_grids -> levels[level] -> restriction[restrictionType] . recv_sizes ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="661" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->restriction[restrictionType].recv_sizes \n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="661" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="662" conditional="all_grids -> levels[level] -> restriction[restrictionType] . recv_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="662" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname=""malloc failed - all_grids->levels[%d]->restriction[restrictionType].recv_buffers\n""/>
<arg paramname="" argname="level"/>
</funccall>
<funccall linenum="662" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="685" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="(numFineBoxesRemote * elementSize) * sizeof(double )"/>
</funccall>
<if linenum="686" conditional="numFineBoxesRemote * elementSize > 0;" adds="0" multiplies="0" divides="0" specials="0">
<if linenum="687" conditional="all_recv_buffers ==((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="687" name="" origname="fprintf" module="unknown">
</funccall>
<funccall linenum="687" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
</if>
<funccall linenum="688" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="all_recv_buffers"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="(numFineBoxesRemote * elementSize) * sizeof(double )"/>
</funccall>
<loop linenum="692" loopvar="neighbor" lowerbound="0" upperbound="numFineRanks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="numFineRanks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="fineRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="3"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="3" writes="0"/>
</array>
<loop linenum="696" loopvar="fineBox" lowerbound="0" upperbound="numFineBoxesRemote" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="sendRank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numFineBoxesRemote" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="fineRanks" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  neighbor)" reads="1" writes="0"/>
</array>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  fineBox)" reads="1" writes="0"/>
</array>
<if linenum="696" conditional="fineBoxes[fineBox] . sendRank == fineRanks[neighbor];" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recvBox" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="neighbor" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="elementSize" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrict_dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="restrict_dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="restrict_dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fineBox" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="offset" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="fineBoxes" component="" datatype="struct {int sendRank;int sendBoxID;int sendBox;int recvRank;int recvBoxID;int recvBox;int i;int j;int k;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level  fineBox)" reads="0" writes="0"/>
</array>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readwrite">
<access offset="(,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level level  fineBoxlevel level level level level level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level, level level level level level level level level level level level level level level level level level level  fineBox)" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level level level level level level level level level level level level level level level  neighbor, level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level level level level level level level level level level level level level level level level level  levellevel level level level level level level level level level level level level level , level level level level level level level level level level level level level level level level level level level level level level level level level level level level  level)" reads="0" writes="0"/>
</array>
<funccall linenum="698" name="" origname="append_block_to_list" module="unknown">
<arg paramname="blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . blocks[2]"/>
<arg paramname="allocated_blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . allocated_blocks[2]"/>
<arg paramname="num_blocks" argname="&all_grids -> levels[level] -> restriction[restrictionType] . num_blocks[2]"/>
<arg paramname="dim_i" argname="restrict_dim_i"/>
<arg paramname="dim_j" argname="restrict_dim_j"/>
<arg paramname="dim_k" argname="restrict_dim_k"/>
<arg paramname="read_box" argname="-1"/>
<arg paramname="read_ptr" argname="all_grids -> levels[level] -> restriction[restrictionType] . recv_buffers[neighbor]"/>
<arg paramname="read_i" argname="offset"/>
<arg paramname="read_j" argname="0"/>
<arg paramname="read_k" argname="0"/>
<arg paramname="read_jStride" argname="restrict_dim_i"/>
<arg paramname="read_kStride" argname="restrict_dim_i * restrict_dim_j"/>
<arg paramname="read_scale" argname="1"/>
<arg paramname="write_box" argname="fineBoxes[fineBox] . recvBox"/>
<arg paramname="write_ptr" argname="((void *)0)"/>
<arg paramname="write_i" argname="fineBoxes[fineBox] . i"/>
<arg paramname="write_j" argname="fineBoxes[fineBox] . j"/>
<arg paramname="write_k" argname="fineBoxes[fineBox] . k"/>
<arg paramname="write_jStride" argname="all_grids -> levels[level] -> my_boxes[fineBoxes[fineBox] . recvBox] . jStride"/>
<arg paramname="write_kStride" argname="all_grids -> levels[level] -> my_boxes[fineBoxes[fineBox] . recvBox] . kStride"/>
<arg paramname="write_scale" argname="1"/>
<arg paramname="my_blockcopy_tile_i" argname="10000"/>
<arg paramname="my_blockcopy_tile_j" argname="8"/>
<arg paramname="my_blockcopy_tile_k" argname="8"/>
<arg paramname="subtype" argname="0"/>
</funccall>
</if>
</loop>
</loop>
<funccall linenum="733" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="fineBoxes"/>
</funccall>
<funccall linenum="734" name="" origname="free" module="unknown">
<arg paramname="__ptr" argname="fineRanks"/>
</funccall>
</if>
</loop>
<loop linenum="749" loopvar="level" lowerbound="0" upperbound="all_grids -> num_levels" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requests" datatype="MPI_Request * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="status" datatype="MPI_Status * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="num_levels" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level  level)" reads="2" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level  levellevel level level level , level level level level level level level level  level)" reads="0" writes="2"/>
</array>
<if linenum="752" conditional="level < all_grids -> num_levels - 1;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="requests" datatype="MPI_Request * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="status" datatype="MPI_Status * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="level" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="nMessages" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="all_grids" component="" datatype="struct {int num_ranks;int my_rank;int num_levels;level_type **levels;struct {uint64_t MGBuild;uint64_t MGSolve;}cycles;int MGSolves_performed;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( level level level level level level level level level level level level  level)" reads="3" writes="0"/>
<access offset="(1 )" dependentloopvar="( level level level level level level level level level level level level  level)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( level level level level level level level level level level level level  levellevel level level level level level , level level level level level level level level level level level level  level)" reads="1" writes="2"/>
<access offset="(0 ,1 )" dependentloopvar="( level level level level level level level level level level level level  levellevel level level level level level , level level level level level level level level level level level level  level)" reads="1" writes="0"/>
</array>
<funccall linenum="755" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="nMessages * sizeof(MPI_Request )"/>
</funccall>
<funccall linenum="756" name="" origname="malloc" module="unknown">
<arg paramname="__size" argname="nMessages * sizeof(MPI_Status )"/>
</funccall>
</if>
</loop>
</function>
<function name="dot">
<nonlocal name="level"/>
<funccall linenum="275" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="282" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_a" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_b" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="a_dot_b_level" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="5" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="a_dot_b_block" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="2" writes="0"/>
</array>
<loop linenum="298" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="299" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="300" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="grid_a" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="grid_b" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="a_dot_b_block" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="306" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="309" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="311" name="" origname="MPI_Allreduce" module="unknown">
<arg paramname="" argname="(&send)"/>
<arg paramname="" argname="(&a_dot_b_level)"/>
<arg paramname="" argname="1"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="((MPI_Op )0x58000003)"/>
<arg paramname="" argname="level -> MPI_COMM_ALLREDUCE"/>
</funccall>
<funccall linenum="312" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="error">
<nonlocal name="level"/>
<funccall linenum="487" name="" origname="add_vectors" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id_c" argname="0"/>
<arg paramname="scale_a" argname="1.0"/>
<arg paramname="id_a" argname="id_a"/>
<arg paramname="scale_b" argname="-1.0"/>
<arg paramname="id_b" argname="id_b"/>
</funccall>
<funccall linenum="488" name="" origname="norm" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="component_id" argname="0"/>
</funccall>
<funccall linenum="489" name="" origname="dot" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id_a" argname="0"/>
<arg paramname="id_b" argname="0"/>
</funccall>
</function>
<function name="evaluateBeta">
<nonlocal name="B"/>
<nonlocal name="Bx"/>
<nonlocal name="By"/>
<nonlocal name="Bz"/>
<funccall linenum="16" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x - xcenter"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="16" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y - ycenter"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="16" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z - zcenter"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="23" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="r2"/>
<arg paramname="__y" argname="0.5"/>
</funccall>
<funccall linenum="24" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="r2"/>
<arg paramname="__y" argname="-0.5"/>
</funccall>
<funccall linenum="25" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="r2"/>
<arg paramname="__y" argname="-0.5"/>
</funccall>
<funccall linenum="26" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="r2"/>
<arg paramname="__y" argname="-0.5"/>
</funccall>
</function>
<function name="evaluateU">
<nonlocal name="U"/>
<nonlocal name="Ux"/>
<nonlocal name="Uy"/>
<nonlocal name="Uz"/>
<nonlocal name="Uxx"/>
<nonlocal name="Uyy"/>
<nonlocal name="Uzz"/>
<if linenum="58" conditional="isPeriodic;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="shift" datatype="double" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
</if>
<funccall linenum="59" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="6"/>
</funccall>
<funccall linenum="59" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="5"/>
</funccall>
<funccall linenum="59" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="59" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="60" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="6"/>
</funccall>
<funccall linenum="60" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="5"/>
</funccall>
<funccall linenum="60" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="60" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="61" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="6"/>
</funccall>
<funccall linenum="61" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="5"/>
</funccall>
<funccall linenum="61" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="61" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="62" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="5"/>
</funccall>
<funccall linenum="62" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="62" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="3"/>
</funccall>
<funccall linenum="63" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="5"/>
</funccall>
<funccall linenum="63" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="63" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="3"/>
</funccall>
<funccall linenum="64" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="5"/>
</funccall>
<funccall linenum="64" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="64" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="3"/>
</funccall>
<funccall linenum="65" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="65" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="3"/>
</funccall>
<funccall linenum="65" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="x"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="66" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="66" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="3"/>
</funccall>
<funccall linenum="66" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="y"/>
<arg paramname="__y" argname="2"/>
</funccall>
<funccall linenum="67" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="4"/>
</funccall>
<funccall linenum="67" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="3"/>
</funccall>
<funccall linenum="67" name="" origname="pow" module="unknown">
<arg paramname="__x" argname="z"/>
<arg paramname="__y" argname="2"/>
</funccall>
</function>
<function name="exchange_boundary">
<local name="recv_requests"/>
<local name="send_requests"/>
<nonlocal name="level"/>
<funccall linenum="11" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="17" conditional="justFaces;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
</else>
<funccall linenum="25" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="29" loopvar="n" lowerbound="0" upperbound="level -> exchange_ghosts[justFaces] . num_recvs" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="my_tag" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="n" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<array name="recv_requests" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="(  n, )" reads="0" writes="0"/>
</array>
<funccall linenum="30" name="" origname="MPI_Irecv" module="unknown">
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . recv_buffers[n]"/>
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . recv_sizes[n]"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . recv_ranks[n]"/>
<arg paramname="" argname="my_tag"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&recv_requests[n]"/>
</funccall>
</loop>
<funccall linenum="39" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="44" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="46" loopvar="buffer" lowerbound="0" upperbound="level -> exchange_ghosts[justFaces] . num_blocks[0]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,,0 )" dependentloopvar="(  buffer, , )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="47" name="" origname="CopyBlock" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="id"/>
<arg paramname="block" argname="&level -> exchange_ghosts[justFaces] . blocks[0][buffer]"/>
</funccall>
</loop>
<funccall linenum="49" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="54" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="58" loopvar="n" lowerbound="0" upperbound="level -> exchange_ghosts[justFaces] . num_sends" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="my_tag" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="n" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<array name="send_requests" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="(  n, )" reads="0" writes="0"/>
</array>
<funccall linenum="59" name="" origname="MPI_Isend" module="unknown">
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . send_buffers[n]"/>
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . send_sizes[n]"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . send_ranks[n]"/>
<arg paramname="" argname="my_tag"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&send_requests[n]"/>
</funccall>
</loop>
<funccall linenum="68" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="74" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="76" loopvar="buffer" lowerbound="0" upperbound="level -> exchange_ghosts[justFaces] . num_blocks[1]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,,0 )" dependentloopvar="(  buffer, , )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="77" name="" origname="CopyBlock" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="id"/>
<arg paramname="block" argname="&level -> exchange_ghosts[justFaces] . blocks[1][buffer]"/>
</funccall>
</loop>
<funccall linenum="79" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="85" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="86" conditional="nMessages;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requests" datatype="MPI_Request * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="status" datatype="MPI_Status * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="nMessages" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="86" name="" origname="MPI_Waitall" module="unknown">
<arg paramname="" argname="nMessages"/>
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . requests"/>
<arg paramname="" argname="level -> exchange_ghosts[justFaces] . status"/>
</funccall>
</if>
<funccall linenum="87" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="92" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="94" loopvar="buffer" lowerbound="0" upperbound="level -> exchange_ghosts[justFaces] . num_blocks[2]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="justFaces" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,,0 )" dependentloopvar="(  buffer, , )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="95" name="" origname="CopyBlock" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="id"/>
<arg paramname="block" argname="&level -> exchange_ghosts[justFaces] . blocks[2][buffer]"/>
</funccall>
</loop>
<funccall linenum="97" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="102" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="initialize_problem">
<nonlocal name="level"/>
<loop linenum="83" loopvar="box" lowerbound="0" upperbound="level -> num_my_boxes" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box" datatype="int" isConstant="false" accesstype="writeread" reads="20" writes="1"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="dim" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="volume" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="num_my_boxes" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="writeonly">
<access offset="(,0 )" dependentloopvar="(  box,  box)" reads="0" writes="0"/>
<access offset="(,0 )" dependentloopvar="(  box,  box)" reads="0" writes="0"/>
<access offset="(,0 )" dependentloopvar="(  box,  box)" reads="0" writes="0"/>
<access offset="(,0 )" dependentloopvar="(  box,  box)" reads="0" writes="0"/>
<access offset="(,0 )" dependentloopvar="(  box,  box)" reads="0" writes="0"/>
<access offset="(,0 )" dependentloopvar="(  box,  box)" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="(  box)" reads="6" writes="0"/>
<access offset="(0 ,,0 )" dependentloopvar="(  boxbox box box ,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  boxbox box box ,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  boxbox box box ,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  boxbox box box ,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  boxbox box box ,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  boxbox box box ,  box,  box)" reads="0" writes="1"/>
</array>
<funccall linenum="84" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="level -> my_boxes[box] . vectors[5]"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="level -> my_boxes[box] . volume * sizeof(double )"/>
</funccall>
<funccall linenum="85" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="level -> my_boxes[box] . vectors[6]"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="level -> my_boxes[box] . volume * sizeof(double )"/>
</funccall>
<funccall linenum="86" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="level -> my_boxes[box] . vectors[7]"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="level -> my_boxes[box] . volume * sizeof(double )"/>
</funccall>
<funccall linenum="87" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="level -> my_boxes[box] . vectors[8]"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="level -> my_boxes[box] . volume * sizeof(double )"/>
</funccall>
<funccall linenum="88" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="level -> my_boxes[box] . vectors[1]"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="level -> my_boxes[box] . volume * sizeof(double )"/>
</funccall>
<funccall linenum="89" name="" origname="memset" module="unknown">
<arg paramname="__s" argname="level -> my_boxes[box] . vectors[3]"/>
<arg paramname="__c" argname="0"/>
<arg paramname="__n" argname="level -> my_boxes[box] . volume * sizeof(double )"/>
</funccall>
<loop linenum="100" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="dim_k" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<loop linenum="101" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="dim_j" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<loop linenum="102" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="9" multiplies="13" divides="0" specials="0">
<scalar name="hLevel" datatype="double" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="10" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="7" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="7" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="21" writes="0"/>
<scalar name="dim_i" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="x" datatype="double" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="y" datatype="double" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="z" datatype="double" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="A" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="B" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="Bx" datatype="double" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<scalar name="By" datatype="double" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<scalar name="Bz" datatype="double" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<scalar name="Bi" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="Bj" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="Bk" datatype="double" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="U" datatype="double" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="Ux" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="Uy" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="Uz" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="Uxx" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="Uyy" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="Uzz" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="F" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="type" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="(  box)" reads="9" writes="0"/>
<access offset="(0 ,,0 )" dependentloopvar="(  box i j k,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  box i j k,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  box i j k,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  box i j k,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  box i j k,  box,  box)" reads="0" writes="1"/>
<access offset="(0 ,,0 )" dependentloopvar="(  box i j k,  box,  box)" reads="0" writes="1"/>
</array>
<funccall linenum="123" name="" origname="evaluateBeta" module="unknown">
<arg paramname="x" argname="x - hLevel * 0.5"/>
<arg paramname="y" argname="y"/>
<arg paramname="z" argname="z"/>
<arg paramname="B" argname="&Bi"/>
<arg paramname="Bx" argname="&Bx"/>
<arg paramname="By" argname="&By"/>
<arg paramname="Bz" argname="&Bz"/>
</funccall>
<funccall linenum="124" name="" origname="evaluateBeta" module="unknown">
<arg paramname="x" argname="x"/>
<arg paramname="y" argname="y - hLevel * 0.5"/>
<arg paramname="z" argname="z"/>
<arg paramname="B" argname="&Bj"/>
<arg paramname="Bx" argname="&Bx"/>
<arg paramname="By" argname="&By"/>
<arg paramname="Bz" argname="&Bz"/>
</funccall>
<funccall linenum="125" name="" origname="evaluateBeta" module="unknown">
<arg paramname="x" argname="x"/>
<arg paramname="y" argname="y"/>
<arg paramname="z" argname="z - hLevel * 0.5"/>
<arg paramname="B" argname="&Bk"/>
<arg paramname="Bx" argname="&Bx"/>
<arg paramname="By" argname="&By"/>
<arg paramname="Bz" argname="&Bz"/>
</funccall>
<funccall linenum="126" name="" origname="evaluateBeta" module="unknown">
<arg paramname="x" argname="x"/>
<arg paramname="y" argname="y"/>
<arg paramname="z" argname="z"/>
<arg paramname="B" argname="&B"/>
<arg paramname="Bx" argname="&Bx"/>
<arg paramname="By" argname="&By"/>
<arg paramname="Bz" argname="&Bz"/>
</funccall>
<funccall linenum="129" name="" origname="evaluateU" module="unknown">
<arg paramname="x" argname="x"/>
<arg paramname="y" argname="y"/>
<arg paramname="z" argname="z"/>
<arg paramname="U" argname="&U"/>
<arg paramname="Ux" argname="&Ux"/>
<arg paramname="Uy" argname="&Uy"/>
<arg paramname="Uz" argname="&Uz"/>
<arg paramname="Uxx" argname="&Uxx"/>
<arg paramname="Uyy" argname="&Uyy"/>
<arg paramname="Uzz" argname="&Uzz"/>
<arg paramname="isPeriodic" argname="level -> boundary_condition . type == 0"/>
</funccall>
</loop>
</loop>
</loop>
</loop>
<if linenum="143" conditional="level -> alpha_is_zero == -1;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="alpha_is_zero" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="143" name="" origname="dot" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id_a" argname="5"/>
<arg paramname="id_b" argname="5"/>
</funccall>
</if>
</function>
<function name="interpolation_pc_block">
<nonlocal name="level_f"/>
<nonlocal name="level_c"/>
<nonlocal name="block"/>
<if linenum="26" conditional="block -> read . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level_c" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="6" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<if linenum="31" conditional="block -> write . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="6" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<loop linenum="39" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<loop linenum="40" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<loop linenum="41" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="1" multiplies="1" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="7" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="prescale_f" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</function>
<function name="interpolation_pc">
<local name="recv_requests"/>
<local name="send_requests"/>
<nonlocal name="level_f"/>
<nonlocal name="level_c"/>
<funccall linenum="53" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="68" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="72" loopvar="n" lowerbound="0" upperbound="level_f -> interpolation . num_recvs" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_tag" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="n" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="recv_requests" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<funccall linenum="73" name="" origname="MPI_Irecv" module="unknown">
<arg paramname="" argname="level_f -> interpolation . recv_buffers[n]"/>
<arg paramname="" argname="level_f -> interpolation . recv_sizes[n]"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="level_f -> interpolation . recv_ranks[n]"/>
<arg paramname="" argname="my_tag"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&recv_requests[n]"/>
</funccall>
</loop>
<funccall linenum="82" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="87" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="89" loopvar="buffer" lowerbound="0" upperbound="level_c -> interpolation . num_blocks[0]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id_f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level_c" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,)" dependentloopvar="(  buffer, )" reads="0" writes="0"/>
</array>
<funccall linenum="91" name="" origname="interpolation_pc_block" module="unknown">
<arg paramname="id_c" argname="id_c"/>
<arg paramname="block" argname="&level_c -> interpolation . blocks[0][buffer]"/>
<arg paramname="level_f" argname="level_f"/>
<arg paramname="id_f" argname="id_f"/>
<arg paramname="prescale_f" argname="0.0"/>
<arg paramname="level_c" argname="level_c"/>
</funccall>
</loop>
<funccall linenum="93" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="98" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="102" loopvar="n" lowerbound="0" upperbound="level_c -> interpolation . num_sends" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_tag" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="n" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="send_requests" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<array name="level_c" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readwrite">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<funccall linenum="103" name="" origname="MPI_Isend" module="unknown">
<arg paramname="" argname="level_c -> interpolation . send_buffers[n]"/>
<arg paramname="" argname="level_c -> interpolation . send_sizes[n]"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="level_c -> interpolation . send_ranks[n]"/>
<arg paramname="" argname="my_tag"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&send_requests[n]"/>
</funccall>
</loop>
<funccall linenum="112" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="118" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="120" loopvar="buffer" lowerbound="0" upperbound="level_c -> interpolation . num_blocks[1]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id_f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="prescale_f" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level_c" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,)" dependentloopvar="(  buffer, )" reads="0" writes="0"/>
</array>
<funccall linenum="121" name="" origname="interpolation_pc_block" module="unknown">
<arg paramname="id_c" argname="id_c"/>
<arg paramname="block" argname="&level_c -> interpolation . blocks[1][buffer]"/>
<arg paramname="level_f" argname="level_f"/>
<arg paramname="id_f" argname="id_f"/>
<arg paramname="prescale_f" argname="prescale_f"/>
<arg paramname="level_c" argname="level_c"/>
</funccall>
</loop>
<funccall linenum="123" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="129" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="130" conditional="nMessages;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="nMessages" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="requests" datatype="MPI_Request * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="status" datatype="MPI_Status * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="130" name="" origname="MPI_Waitall" module="unknown">
<arg paramname="" argname="nMessages"/>
<arg paramname="" argname="level_f -> interpolation . requests"/>
<arg paramname="" argname="level_f -> interpolation . status"/>
</funccall>
</if>
<funccall linenum="131" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="135" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="137" loopvar="buffer" lowerbound="0" upperbound="level_f -> interpolation . num_blocks[2]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id_f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="prescale_f" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,)" dependentloopvar="(  buffer, )" reads="0" writes="0"/>
</array>
<funccall linenum="138" name="" origname="IncrementBlock" module="unknown">
<arg paramname="level" argname="level_f"/>
<arg paramname="id" argname="id_f"/>
<arg paramname="prescale" argname="prescale_f"/>
<arg paramname="block" argname="&level_f -> interpolation . blocks[2][buffer]"/>
</funccall>
</loop>
<funccall linenum="140" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="146" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="interpolation_vcycle">
<nonlocal name="level_f"/>
<nonlocal name="level_c"/>
<funccall linenum="362" name="" origname="interpolation_pc" module="unknown">
<arg paramname="level_f" argname="level_f"/>
<arg paramname="id_f" argname="id_f"/>
<arg paramname="prescale_f" argname="prescale_f"/>
<arg paramname="level_c" argname="level_c"/>
<arg paramname="id_c" argname="id_c"/>
</funccall>
</function>
<function name="main">
<nonlocal name="stdout"/>
<nonlocal name="stderr"/>
<nonlocal name="argv"/>
<funccall linenum="82" name="" origname="MPI_Init_thread" module="unknown">
<arg paramname="" argname="&argc"/>
<arg paramname="" argname="&argv"/>
<arg paramname="" argname="requested_threading_model"/>
<arg paramname="" argname="&actual_threading_model"/>
</funccall>
<funccall linenum="83" name="" origname="MPI_Comm_size" module="unknown">
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&num_tasks"/>
</funccall>
<funccall linenum="84" name="" origname="MPI_Comm_rank" module="unknown">
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&my_rank"/>
</funccall>
<if linenum="86" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="actual_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="requested_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="87" conditional="requested_threading_model == 3;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="87" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requested_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="88" conditional="requested_threading_model == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="88" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requested_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="89" conditional="requested_threading_model == 1;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="89" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requested_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="90" conditional="requested_threading_model == 2;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="90" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requested_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="91" conditional="requested_threading_model == 3;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="91" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requested_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="92" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""Requested Unknown MPI Threading Model(%d), ""/>
<arg paramname="" argname="requested_threading_model"/>
</funccall>
</else>
</else>
</else>
</else>
</else>
<if linenum="93" conditional="actual_threading_model == 3;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="93" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="actual_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="94" conditional="actual_threading_model == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="94" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="actual_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="95" conditional="actual_threading_model == 1;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="95" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="actual_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="96" conditional="actual_threading_model == 2;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="96" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="actual_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="97" conditional="actual_threading_model == 3;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="97" name="" origname="printf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="actual_threading_model" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="98" name="" origname="printf" module="unknown">
<arg paramname="__format" argname=""got Unknown MPI Threading Model(%d)\n""/>
<arg paramname="" argname="actual_threading_model"/>
</funccall>
</else>
</else>
</else>
</else>
</else>
</if>
<if linenum="109" conditional="argc == 3;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="log2_box_dim" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="target_boxes_per_rank" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="argv" component="" datatype="char" accesstype="readonly">
<access offset="()" dependentloopvar="( )" reads="0" writes="0"/>
<access offset="()" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="110" name="" origname="atoi" module="unknown">
<arg paramname="__nptr" argname="argv[1]"/>
</funccall>
<funccall linenum="111" name="" origname="atoi" module="unknown">
<arg paramname="__nptr" argname="argv[2]"/>
</funccall>
</if>
<else linenum="112" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="113" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="113" name="" origname="printf" module="unknown">
</funccall>
</if>
<funccall linenum="115" name="" origname="MPI_Finalize" module="unknown">
</funccall>
<funccall linenum="117" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</else>
<if linenum="120" conditional="log2_box_dim < 4;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="121" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="121" name="" origname="printf" module="unknown">
</funccall>
</if>
<funccall linenum="123" name="" origname="MPI_Finalize" module="unknown">
</funccall>
<funccall linenum="125" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="128" conditional="target_boxes_per_rank < 1;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="129" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="129" name="" origname="printf" module="unknown">
</funccall>
</if>
<funccall linenum="131" name="" origname="MPI_Finalize" module="unknown">
</funccall>
<funccall linenum="133" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<if linenum="136" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="OMP_Nested" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="137" conditional="OMP_Nested;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_tasks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="OMP_Threads" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="137" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<else linenum="0" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_tasks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="OMP_Threads" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="138" name="" origname="fprintf" module="unknown">
</funccall>
</else>
</if>
<loop linenum="149" loopvar="bi" lowerbound="1" upperbound="1000" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<if linenum="151" conditional="total_boxes <= target_boxes;" adds="0" multiplies="0" divides="0" specials="0">
<if linenum="154" conditional="coarse_grid_dim <= 11;" adds="0" multiplies="0" divides="0" specials="0">
</if>
</if>
</loop>
<if linenum="159" conditional="boxes_in_i < 1;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="160" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="160" name="" origname="printf" module="unknown">
</funccall>
</if>
<funccall linenum="162" name="" origname="MPI_Finalize" module="unknown">
</funccall>
<funccall linenum="164" name="" origname="exit" module="unknown">
<arg paramname="__status" argname="0"/>
</funccall>
</if>
<funccall linenum="174" name="" origname="stencil_get_radius" module="unknown">
</funccall>
<funccall linenum="175" name="" origname="create_level" module="unknown">
<arg paramname="level" argname="&fine_grid"/>
<arg paramname="boxes_in_i" argname="boxes_in_i"/>
<arg paramname="box_dim" argname="box_dim"/>
<arg paramname="box_ghosts" argname="ghosts"/>
<arg paramname="numVectors" argname="12"/>
<arg paramname="domain_boundary_condition" argname="bc"/>
<arg paramname="my_rank" argname="my_rank"/>
<arg paramname="num_ranks" argname="num_tasks"/>
</funccall>
<if linenum="179" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="179" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<funccall linenum="185" name="" origname="initialize_problem" module="unknown">
<arg paramname="level" argname="&fine_grid"/>
<arg paramname="hLevel" argname="h0"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
</funccall>
<if linenum="187" conditional="(a == 0.0 || fine_grid . alpha_is_zero == 1) && fine_grid . boundary_condition . type == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="average_value_of_u" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="191" name="" origname="mean" module="unknown">
<arg paramname="level" argname="&fine_grid"/>
<arg paramname="id_a" argname="1"/>
</funccall>
<if linenum="192" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="average_value_of_u" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="192" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stdout"/>
<arg paramname="__format" argname="" average value of u_true = %20.12e... shifting u_true to ensure it sums to zero...\n""/>
<arg paramname="" argname="average_value_of_u"/>
</funccall>
</if>
<funccall linenum="193" name="" origname="shift_vector" module="unknown">
<arg paramname="level" argname="&fine_grid"/>
<arg paramname="id_c" argname="1"/>
<arg paramname="id_a" argname="1"/>
<arg paramname="shift_a" argname="-average_value_of_u"/>
</funccall>
</if>
<if linenum="198" conditional="fine_grid . boundary_condition . type == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="average_value_of_f" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="199" name="" origname="mean" module="unknown">
<arg paramname="level" argname="&fine_grid"/>
<arg paramname="id_a" argname="3"/>
</funccall>
<if linenum="200" conditional="average_value_of_f != 0.0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="201" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="average_value_of_f" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="201" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stderr"/>
<arg paramname="__format" argname="" WARNING... Periodic boundary conditions, but f does not sum to zero... mean(f)=%e\n""/>
<arg paramname="" argname="average_value_of_f"/>
</funccall>
</if>
</if>
</if>
<funccall linenum="208" name="" origname="rebuild_operator" module="unknown">
<arg paramname="level" argname="&fine_grid"/>
<arg paramname="fromLevel" argname="((void *)0)"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
</funccall>
<funccall linenum="209" name="" origname="MGBuild" module="unknown">
<arg paramname="all_grids" argname="&all_grids"/>
<arg paramname="fine_grid" argname="&fine_grid"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
<arg paramname="minCoarseGridDim" argname="minCoarseDim"/>
</funccall>
<loop linenum="216" loopvar="doTiming" lowerbound="0" upperbound="1" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="my_rank" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="dtol" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="rtol" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="doTiming" datatype="int" isConstant="false" accesstype="writeread" reads="4" writes="1"/>
<scalar name="minSolves" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numSolves" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<funccall linenum="224" name="" origname="MPI_Wtime" module="unknown">
</funccall>
<if linenum="225" conditional="doTiming == 1;" adds="0" multiplies="0" divides="1" specials="0">
<scalar name="minSolves" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="timePerSolve" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="minTime" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="226" conditional="minTime / timePerSolve > minSolves;" adds="0" multiplies="0" divides="1" specials="0">
<scalar name="minSolves" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="timePerSolve" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="minTime" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
</if>
<if linenum="230" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="doTiming" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<if linenum="231" conditional="doTiming == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="minSolves" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="231" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stdout"/>
<arg paramname="__format" argname=""\n\n===== warming up by running %d solves ===============================\n""/>
<arg paramname="" argname="minSolves"/>
</funccall>
</if>
<else linenum="232" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="minSolves" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="232" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stdout"/>
<arg paramname="__format" argname=""\n\n===== running %d solves =============================================\n""/>
<arg paramname="" argname="minSolves"/>
</funccall>
</else>
<funccall linenum="233" name="" origname="fflush" module="unknown">
<arg paramname="__stream" argname="stdout"/>
</funccall>
</if>
<funccall linenum="237" name="" origname="MGResetTimers" module="unknown">
<arg paramname="all_grids" argname="&all_grids"/>
</funccall>
<funccall linenum="239" name="" origname="zero_vector" module="unknown">
<arg paramname="level" argname="all_grids . levels[0]"/>
<arg paramname="id_a" argname="4"/>
</funccall>
<funccall linenum="243" name="" origname="MGSolve" module="unknown">
<arg paramname="all_grids" argname="&all_grids"/>
<arg paramname="u_id" argname="4"/>
<arg paramname="F_id" argname="3"/>
<arg paramname="a" argname="a"/>
<arg paramname="b" argname="b"/>
<arg paramname="dtol" argname="dtol"/>
<arg paramname="rtol" argname="rtol"/>
</funccall>
<if linenum="249" conditional="doTiming == 0;" adds="1" multiplies="0" divides="1" specials="0">
<scalar name="timePerSolve" datatype="double" isConstant="false" accesstype="writeread" reads="1" writes="1"/>
<scalar name="startTime" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="numSolves" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="endTime" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="250" name="" origname="MPI_Wtime" module="unknown">
</funccall>
<funccall linenum="252" name="" origname="MPI_Bcast" module="unknown">
<arg paramname="" argname="(&timePerSolve)"/>
<arg paramname="" argname="1"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="0"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
</funccall>
</if>
</loop>
<funccall linenum="260" name="" origname="MGPrintTiming" module="unknown">
<arg paramname="all_grids" argname="&all_grids"/>
</funccall>
<if linenum="262" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="262" name="" origname="fprintf" module="unknown">
</funccall>
</if>
<funccall linenum="263" name="" origname="error" module="unknown">
<arg paramname="level" argname="&fine_grid"/>
<arg paramname="id_a" argname="4"/>
<arg paramname="id_b" argname="1"/>
</funccall>
<if linenum="264" conditional="my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="h0" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fine_error" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="264" name="" origname="fprintf" module="unknown">
</funccall>
<funccall linenum="264" name="" origname="fflush" module="unknown">
<arg paramname="__stream" argname="stdout"/>
</funccall>
</if>
<funccall linenum="272" name="" origname="MPI_Finalize" module="unknown">
</funccall>
</function>
<function name="mean">
<nonlocal name="level"/>
<funccall linenum="367" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="374" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_a" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="sum_level" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="4" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="sum_block" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="1" writes="0"/>
</array>
<loop linenum="389" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="390" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="391" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="4" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="grid_a" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="sum_block" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="397" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="401" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="403" name="" origname="MPI_Allreduce" module="unknown">
<arg paramname="" argname="(&send)"/>
<arg paramname="" argname="(&sum_level)"/>
<arg paramname="" argname="1"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="((MPI_Op )0x58000003)"/>
<arg paramname="" argname="level -> MPI_COMM_ALLREDUCE"/>
</funccall>
<funccall linenum="404" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="mul_vectors">
<nonlocal name="level"/>
<funccall linenum="175" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="180" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_a" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_b" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
</array>
<loop linenum="196" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="197" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="198" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="0" multiplies="2" divides="0" specials="0">
<scalar name="scale" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="4" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="4" writes="0"/>
<scalar name="grid_c" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="grid_a" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="grid_b" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="203" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="norm">
<nonlocal name="level"/>
<funccall linenum="321" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="327" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="component_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="max_norm" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="4" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block_norm" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="1" writes="0"/>
</array>
<loop linenum="342" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="343" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="344" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="4" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="grid" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block_norm" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="fabs_grid_ijk" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="346" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="grid[i + j * jStride + k * kStride]"/>
</funccall>
<if linenum="347" conditional="fabs_grid_ijk > block_norm;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="block_norm" datatype="double" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="fabs_grid_ijk" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
</loop>
</loop>
</loop>
<if linenum="350" conditional="block_norm > max_norm;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="max_norm" datatype="double" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="block_norm" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
</loop>
<funccall linenum="352" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="355" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="357" name="" origname="MPI_Allreduce" module="unknown">
<arg paramname="" argname="(&send)"/>
<arg paramname="" argname="(&max_norm)"/>
<arg paramname="" argname="1"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="((MPI_Op )0x58000001)"/>
<arg paramname="" argname="level -> MPI_COMM_ALLREDUCE"/>
</funccall>
<funccall linenum="358" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="rebuild_operator">
<nonlocal name="stdout"/>
<nonlocal name="level"/>
<nonlocal name="fromLevel"/>
<if linenum="199" conditional="level -> my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="h" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="199" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stdout"/>
<arg paramname="__format" argname="" rebuilding operator for level... h=%e ""/>
<arg paramname="" argname="level -> h"/>
</funccall>
</if>
<if linenum="203" conditional="fromLevel !=((void *)0);" adds="0" multiplies="0" divides="0" specials="0">
<funccall linenum="204" name="" origname="restriction" module="unknown">
<arg paramname="level_c" argname="level"/>
<arg paramname="id_c" argname="5"/>
<arg paramname="level_f" argname="fromLevel"/>
<arg paramname="id_f" argname="5"/>
<arg paramname="restrictionType" argname="0"/>
</funccall>
<funccall linenum="205" name="" origname="restriction" module="unknown">
<arg paramname="level_c" argname="level"/>
<arg paramname="id_c" argname="6"/>
<arg paramname="level_f" argname="fromLevel"/>
<arg paramname="id_f" argname="6"/>
<arg paramname="restrictionType" argname="1"/>
</funccall>
<funccall linenum="206" name="" origname="restriction" module="unknown">
<arg paramname="level_c" argname="level"/>
<arg paramname="id_c" argname="7"/>
<arg paramname="level_f" argname="fromLevel"/>
<arg paramname="id_f" argname="7"/>
<arg paramname="restrictionType" argname="2"/>
</funccall>
<funccall linenum="207" name="" origname="restriction" module="unknown">
<arg paramname="level_c" argname="level"/>
<arg paramname="id_c" argname="8"/>
<arg paramname="level_f" argname="fromLevel"/>
<arg paramname="id_f" argname="8"/>
<arg paramname="restrictionType" argname="3"/>
</funccall>
</if>
<funccall linenum="213" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="5"/>
<arg paramname="justFaces" argname="0"/>
</funccall>
<funccall linenum="214" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="6"/>
<arg paramname="justFaces" argname="0"/>
</funccall>
<funccall linenum="215" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="7"/>
<arg paramname="justFaces" argname="0"/>
</funccall>
<funccall linenum="216" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="8"/>
<arg paramname="justFaces" argname="0"/>
</funccall>
<funccall linenum="221" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="227" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="h" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="dominant_eigenvalue" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="10" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="7" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="7" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="7" writes="0"/>
<scalar name="block_eigenvalue" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="14" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
</array>
<loop linenum="249" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="12" writes="0"/>
<loop linenum="250" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="251" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="18" multiplies="18" divides="2" specials="0">
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="29" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="27" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="27" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="33" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="33" writes="0"/>
<scalar name="h2inv" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="alpha" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="beta_i" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="beta_j" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="beta_k" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="Dinv" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="valid" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="12" writes="0"/>
<scalar name="block_eigenvalue" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="sumAbsAij" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="Aii" datatype="double" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="Di" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="256" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="b * h2inv"/>
</funccall>
<funccall linenum="257" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="beta_i[i + j * jStride + k * kStride] * valid[i + j * jStride + k * kStride - 1]"/>
</funccall>
<funccall linenum="258" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="beta_j[i + j * jStride + k * kStride] * valid[i + j * jStride + k * kStride - jStride]"/>
</funccall>
<funccall linenum="259" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="beta_k[i + j * jStride + k * kStride] * valid[i + j * jStride + k * kStride - kStride]"/>
</funccall>
<funccall linenum="260" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="beta_i[i + j * jStride + k * kStride + 1] * valid[i + j * jStride + k * kStride + 1]"/>
</funccall>
<funccall linenum="261" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="beta_j[i + j * jStride + k * kStride + jStride] * valid[i + j * jStride + k * kStride + jStride]"/>
</funccall>
<funccall linenum="262" name="" origname="fabs" module="unknown">
<arg paramname="__x" argname="beta_k[i + j * jStride + k * kStride + kStride] * valid[i + j * jStride + k * kStride + kStride]"/>
</funccall>
<if linenum="299" conditional="Aii >= 1.5 * sumAbsAij;" adds="0" multiplies="0" divides="1" specials="0">
<scalar name="L1inv" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="Aii" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
<else linenum="0" adds="1" multiplies="1" divides="1" specials="0">
<scalar name="L1inv" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="sumAbsAij" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="Aii" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</else>
<if linenum="301" conditional="Di > block_eigenvalue;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="block_eigenvalue" datatype="double" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="Di" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
</loop>
</loop>
</loop>
<if linenum="303" conditional="block_eigenvalue > dominant_eigenvalue;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dominant_eigenvalue" datatype="double" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="block_eigenvalue" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</if>
</loop>
<funccall linenum="305" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="311" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="313" name="" origname="MPI_Allreduce" module="unknown">
<arg paramname="" argname="(&send)"/>
<arg paramname="" argname="(&dominant_eigenvalue)"/>
<arg paramname="" argname="1"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="((MPI_Op )0x58000001)"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
</funccall>
<funccall linenum="314" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="317" conditional="level -> my_rank == 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dominant_eigenvalue" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<funccall linenum="317" name="" origname="fprintf" module="unknown">
<arg paramname="__stream" argname="stdout"/>
<arg paramname="__format" argname=""eigenvalue_max<%e\n""/>
<arg paramname="" argname="dominant_eigenvalue"/>
</funccall>
</if>
<funccall linenum="323" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="9"/>
<arg paramname="justFaces" argname="0"/>
</funccall>
<funccall linenum="324" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="10"/>
<arg paramname="justFaces" argname="0"/>
</funccall>
</function>
<function name="residual">
<local name="x"/>
<local name="rhs"/>
<local name="alpha"/>
<local name="beta_i"/>
<local name="beta_j"/>
<local name="beta_k"/>
<local name="valid"/>
<local name="res"/>
<nonlocal name="level"/>
<funccall linenum="10" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="x_id"/>
<arg paramname="justFaces" argname="stencil_is_star_shaped()"/>
</funccall>
<funccall linenum="10" name="" origname="stencil_is_star_shaped" module="unknown">
</funccall>
<funccall linenum="11" name="" origname="apply_BCs" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="x_id" argname="x_id"/>
<arg paramname="justFaces" argname="stencil_is_star_shaped()"/>
</funccall>
<funccall linenum="11" name="" origname="stencil_is_star_shaped" module="unknown">
</funccall>
<funccall linenum="14" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="18" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="h" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="res_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="x_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="rhs_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="11" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="8" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="8" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="8" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="22" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="8" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
</array>
<array name="x" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
</array>
<array name="rhs" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
</array>
<array name="alpha" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
</array>
<array name="beta_i" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
</array>
<array name="beta_j" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
</array>
<array name="beta_k" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
</array>
<array name="valid" component="" datatype="double" accesstype="readonly">
<access offset="(1 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( block block block )" reads="1" writes="0"/>
</array>
<array name="res" component="" datatype="double" accesstype="writeonly">
<access offset="(0 )" dependentloopvar="( block block block )" reads="0" writes="1"/>
</array>
<loop linenum="40" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="x" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 )" dependentloopvar="( block k block k  k)" reads="1" writes="0"/>
</array>
<loop linenum="41" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="x" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 )" dependentloopvar="( block k j  j k)" reads="1" writes="0"/>
</array>
<loop linenum="42" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="19" multiplies="22" divides="0" specials="0">
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="27" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="25" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="25" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="30" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="30" writes="0"/>
<scalar name="h2inv" datatype="const double" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
<scalar name="Ax" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="x" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="3" writes="0"/>
<access offset="(1 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 1 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 1 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(-1 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 -1 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 -1 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="10" writes="0"/>
</array>
<array name="rhs" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
</array>
<array name="alpha" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
</array>
<array name="beta_i" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(1 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
</array>
<array name="beta_j" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 1 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
</array>
<array name="beta_k" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 1 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
</array>
<array name="valid" component="" datatype="double" accesstype="readonly">
<access offset="(1 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 1 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 1 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(-1 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 -1 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 -1 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
</array>
<array name="res" component="" datatype="double" accesstype="writeonly">
<access offset="(0 0 0 0 )" dependentloopvar="(  i j k)" reads="0" writes="1"/>
</array>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="48" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="restriction_pc_block">
<nonlocal name="level_c"/>
<nonlocal name="level_f"/>
<nonlocal name="block"/>
<if linenum="26" conditional="block -> read . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="6" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<if linenum="31" conditional="block -> write . box >= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="writeonly" reads="0" writes="1"/>
<array name="level_c" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="6" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , )" reads="1" writes="0"/>
</array>
</if>
<loop linenum="42" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<loop linenum="43" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="44" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="7" multiplies="1" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="13" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="13" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="8" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="13" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="11" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="11" writes="0"/>
</loop>
</loop>
</loop>
<loop linenum="53" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<loop linenum="54" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="55" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="3" multiplies="1" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
</loop>
</loop>
</loop>
<loop linenum="64" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<loop linenum="65" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="66" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="3" multiplies="1" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
</loop>
</loop>
</loop>
<loop linenum="75" loopvar="k" lowerbound="0" upperbound="dim_k" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="write_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_ijk" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<loop linenum="76" loopvar="j" lowerbound="0" upperbound="dim_j" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="dim_j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="77" loopvar="i" lowerbound="0" upperbound="dim_i" stride="1" adds="3" multiplies="1" divides="0" specials="0">
<scalar name="dim_i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="read_i" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_j" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_k" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="read_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="read_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="5" writes="0"/>
<scalar name="write_i" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_jStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="write_kStride" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="read" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="write" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="7" writes="0"/>
</loop>
</loop>
</loop>
</function>
<function name="restriction">
<local name="recv_requests"/>
<local name="send_requests"/>
<nonlocal name="level_c"/>
<nonlocal name="level_f"/>
<funccall linenum="93" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="110" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="114" loopvar="n" lowerbound="0" upperbound="level_c -> restriction[restrictionType] . num_recvs" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_recvs" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="recv_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="n" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="my_tag" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="recv_requests" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<array name="level_c" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readwrite">
<access offset="(0 ,0 )" dependentloopvar="(  n, )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="115" name="" origname="MPI_Irecv" module="unknown">
<arg paramname="" argname="level_c -> restriction[restrictionType] . recv_buffers[n]"/>
<arg paramname="" argname="level_c -> restriction[restrictionType] . recv_sizes[n]"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="level_c -> restriction[restrictionType] . recv_ranks[n]"/>
<arg paramname="" argname="my_tag"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&recv_requests[n]"/>
</funccall>
</loop>
<funccall linenum="124" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="129" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="131" loopvar="buffer" lowerbound="0" upperbound="level_f -> restriction[restrictionType] . num_blocks[0]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,,0 )" dependentloopvar="(  buffer, , )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="132" name="" origname="restriction_pc_block" module="unknown">
<arg paramname="level_c" argname="level_c"/>
<arg paramname="id_c" argname="id_c"/>
<arg paramname="level_f" argname="level_f"/>
<arg paramname="id_f" argname="id_f"/>
<arg paramname="block" argname="&level_f -> restriction[restrictionType] . blocks[0][buffer]"/>
<arg paramname="restrictionType" argname="restrictionType"/>
</funccall>
</loop>
<funccall linenum="134" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="139" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="143" loopvar="n" lowerbound="0" upperbound="level_f -> restriction[restrictionType] . num_sends" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="num_sends" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_ranks" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_sizes" datatype="int * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="send_buffers" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="4" writes="0"/>
<scalar name="n" datatype="int" isConstant="false" accesstype="writeread" reads="6" writes="1"/>
<scalar name="my_tag" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="send_requests" component="" datatype="int" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  n)" reads="0" writes="0"/>
</array>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readwrite">
<access offset="(0 ,0 )" dependentloopvar="(  n, )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="144" name="" origname="MPI_Isend" module="unknown">
<arg paramname="" argname="level_f -> restriction[restrictionType] . send_buffers[n]"/>
<arg paramname="" argname="level_f -> restriction[restrictionType] . send_sizes[n]"/>
<arg paramname="" argname="((MPI_Datatype )0x4c00080b)"/>
<arg paramname="" argname="level_f -> restriction[restrictionType] . send_ranks[n]"/>
<arg paramname="" argname="my_tag"/>
<arg paramname="" argname="((MPI_Comm )0x44000000)"/>
<arg paramname="" argname="&send_requests[n]"/>
</funccall>
</loop>
<funccall linenum="153" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="159" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="161" loopvar="buffer" lowerbound="0" upperbound="level_f -> restriction[restrictionType] . num_blocks[1]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_f" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,,0 )" dependentloopvar="(  buffer, , )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="162" name="" origname="restriction_pc_block" module="unknown">
<arg paramname="level_c" argname="level_c"/>
<arg paramname="id_c" argname="id_c"/>
<arg paramname="level_f" argname="level_f"/>
<arg paramname="id_f" argname="id_f"/>
<arg paramname="block" argname="&level_f -> restriction[restrictionType] . blocks[1][buffer]"/>
<arg paramname="restrictionType" argname="restrictionType"/>
</funccall>
</loop>
<funccall linenum="164" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="170" name="" origname="CycleTime" module="unknown">
</funccall>
<if linenum="171" conditional="nMessages;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="requests" datatype="MPI_Request * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="status" datatype="MPI_Status * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="nMessages" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level_f" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="171" name="" origname="MPI_Waitall" module="unknown">
<arg paramname="" argname="nMessages"/>
<arg paramname="" argname="level_f -> restriction[restrictionType] . requests"/>
<arg paramname="" argname="level_f -> restriction[restrictionType] . status"/>
</funccall>
</if>
<funccall linenum="172" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="177" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="179" loopvar="buffer" lowerbound="0" upperbound="level_c -> restriction[restrictionType] . num_blocks[2]" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="restrictionType" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="buffer" datatype="int" isConstant="false" accesstype="writeread" reads="3" writes="1"/>
<array name="level_c" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 ,,0 )" dependentloopvar="(  buffer, , )" reads="0" writes="0"/>
<access offset="(0 )" dependentloopvar="( )" reads="0" writes="0"/>
</array>
<funccall linenum="180" name="" origname="CopyBlock" module="unknown">
<arg paramname="level" argname="level_c"/>
<arg paramname="id" argname="id_c"/>
<arg paramname="block" argname="&level_c -> restriction[restrictionType] . blocks[2][buffer]"/>
</funccall>
</loop>
<funccall linenum="182" name="" origname="CycleTime" module="unknown">
</funccall>
<funccall linenum="187" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="scale_vector">
<nonlocal name="level"/>
<funccall linenum="242" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="247" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_a" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="5" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="2" writes="0"/>
</array>
<loop linenum="262" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="263" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="264" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="0" multiplies="1" divides="0" specials="0">
<scalar name="scale_a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="grid_c" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="grid_a" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="269" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="shift_vector">
<nonlocal name="level"/>
<funccall linenum="415" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="419" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_c" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="id_a" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="5" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="3" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="2" writes="0"/>
</array>
<loop linenum="435" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="436" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="437" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="1" multiplies="0" divides="0" specials="0">
<scalar name="shift_a" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="5" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="3" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="grid_c" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="grid_a" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="442" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
<function name="smooth">
<local name="phi"/>
<local name="phi_new"/>
<local name="rhs"/>
<local name="alpha"/>
<local name="beta_i"/>
<local name="beta_j"/>
<local name="beta_k"/>
<local name="Dinv"/>
<local name="valid"/>
<local name="RedBlack"/>
<nonlocal name="level"/>
<loop linenum="11" loopvar="s" lowerbound="0" upperbound="2 * 2" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="phi_id" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="s" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="9" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="21" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
<access offset="(,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s )" reads="2" writes="0"/>
<access offset="(0 )" dependentloopvar="( s )" reads="7" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( , s )" reads="1" writes="0"/>
</array>
<array name="rhs" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
</array>
<array name="alpha" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
</array>
<array name="beta_i" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
</array>
<array name="beta_j" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
</array>
<array name="beta_k" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
</array>
<array name="valid" component="" datatype="double" accesstype="readonly">
<access offset="(1 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
</array>
<array name="phi" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s s s )" reads="1" writes="0"/>
</array>
<funccall linenum="13" name="" origname="exchange_boundary" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="id" argname="phi_id"/>
<arg paramname="justFaces" argname="stencil_is_star_shaped()"/>
</funccall>
<funccall linenum="13" name="" origname="stencil_is_star_shaped" module="unknown">
</funccall>
<funccall linenum="13" name="" origname="apply_BCs" module="unknown">
<arg paramname="level" argname="level"/>
<arg paramname="x_id" argname="phi_id"/>
<arg paramname="justFaces" argname="stencil_is_star_shaped()"/>
</funccall>
<funccall linenum="13" name="" origname="stencil_is_star_shaped" module="unknown">
</funccall>
<funccall linenum="16" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="19" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="10" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="9" writes="0"/>
<scalar name="h" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="box_ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="phi_id" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="rhs_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="18" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="6" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="11" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="11" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="9" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="14" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="()" dependentloopvar="( )" reads="1" writes="0"/>
<access offset="()" dependentloopvar="( )" reads="1" writes="0"/>
<access offset="(,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
<access offset="(,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
<access offset="(,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
<access offset="(,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
<access offset="(,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
<access offset="(,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="16" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="5" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="1" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="(  block,  block)" reads="9" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
<access offset="(0 ,0 ,0 )" dependentloopvar="(  block,  block,  block)" reads="1" writes="0"/>
</array>
<array name="alpha" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
</array>
<array name="beta_i" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(1 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
</array>
<array name="beta_j" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
</array>
<array name="beta_k" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
</array>
<array name="valid" component="" datatype="double" accesstype="readonly">
<access offset="(1 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(-1 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
</array>
<array name="phi" component="" datatype="double" accesstype="readonly">
<access offset="(0 )" dependentloopvar="( s block s block s block )" reads="1" writes="0"/>
</array>
<loop linenum="62" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="phi" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 )" dependentloopvar="( s block k s block k  k)" reads="1" writes="0"/>
</array>
<loop linenum="63" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="phi" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 )" dependentloopvar="( s block k j  j k)" reads="1" writes="0"/>
</array>
<loop linenum="64" loopvar="i" lowerbound="ilo +((j ^ k ^ s ^ color000) & 1) + 1 - ghosts" upperbound="ihi" stride="2" adds="32" multiplies="32" divides="1" specials="0">
<scalar name="a" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="b" datatype="double" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="s" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ilo" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="40" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="39" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="39" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="color000" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="46" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="46" writes="0"/>
<scalar name="h2inv" datatype="const double" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="11" writes="0"/>
<scalar name="Ax" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="lambda" datatype="double" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="rhs" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
</array>
<array name="alpha" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
</array>
<array name="beta_i" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(1 0 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
</array>
<array name="beta_j" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(0 1 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
</array>
<array name="beta_k" component="" datatype="double" accesstype="readonly">
<access offset="(0 0 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(0 0 1 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
</array>
<array name="valid" component="" datatype="double" accesstype="readonly">
<access offset="(1 0 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(0 1 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(0 0 1 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(-1 0 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(0 -1 0 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
<access offset="(0 0 -1 0 0 )" dependentloopvar="(  i j k)" reads="2" writes="0"/>
</array>
<array name="phi" component="" datatype="double" accesstype="readwrite">
<access offset="(0 0 0 0 0 )" dependentloopvar="(  i j k)" reads="4" writes="0"/>
<access offset="(1 0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 1 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 1 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(-1 0 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 -1 0 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 -1 0 0 )" dependentloopvar="(  i j k)" reads="1" writes="0"/>
<access offset="(0 0 0 0 0 )" dependentloopvar="(  i j k)" reads="10" writes="1"/>
</array>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="83" name="" origname="CycleTime" module="unknown">
</funccall>
</loop>
</function>
<function name="stencil_get_radius">
</function>
<function name="stencil_is_star_shaped">
</function>
<function name="zero_vector">
<nonlocal name="level"/>
<funccall linenum="8" name="" origname="CycleTime" module="unknown">
</funccall>
<loop linenum="12" loopvar="block" lowerbound="0" upperbound="level -> num_my_blocks" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="box" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="dim" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="vectors" datatype="double ** __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="num_my_blocks" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="component_id" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="block" datatype="int" isConstant="false" accesstype="writeread" reads="9" writes="1"/>
<scalar name="box" datatype="const int" isConstant="true" accesstype="readonly" reads="5" writes="0"/>
<scalar name="ilo" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="jlo" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="klo" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="ihi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
<scalar name="dim" datatype="const int" isConstant="true" accesstype="readonly" reads="3" writes="0"/>
<scalar name="ijk" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<array name="level" component="" datatype="struct {double h;int active;int num_ranks;int my_rank;int box_dim;int box_ghosts;int box_jStride;int box_kStride;int box_volume;int numVectors;int tag;struct {int i;int j;int k;}boxes_in;struct {int i;int j;int k;}dim;int *rank_of_box;int num_my_boxes;box_type *my_boxes;double ** __restrict__ vectors;double * __restrict__ vectors_base;int allocated_blocks;int num_my_blocks;blockCopy_type *my_blocks;struct {int type;int allocated_blocks[2];int num_blocks[2];blockCopy_type *blocks[2];}boundary_condition;communicator_type exchange_ghosts[2];communicator_type restriction[4];communicator_type interpolation;MPI_Comm MPI_COMM_ALLREDUCE;double dominant_eigenvalue_of_DinvA;int alpha_is_zero;double * __restrict__ RedBlack_FP[2];int num_threads;int concurrent_boxes;int threads_per_box;uint64_t memory_allocated;struct {uint64_t smooth;uint64_t apply_op;uint64_t residual;uint64_t blas1;uint64_t blas3;uint64_t boundary_conditions;uint64_t restriction_total;uint64_t restriction_pack;uint64_t restriction_local;uint64_t restriction_unpack;uint64_t restriction_recv;uint64_t restriction_send;uint64_t restriction_wait;uint64_t interpolation_total;uint64_t interpolation_pack;uint64_t interpolation_local;uint64_t interpolation_unpack;uint64_t interpolation_recv;uint64_t interpolation_send;uint64_t interpolation_wait;uint64_t ghostZone_total;uint64_t ghostZone_pack;uint64_t ghostZone_local;uint64_t ghostZone_unpack;uint64_t ghostZone_recv;uint64_t ghostZone_send;uint64_t ghostZone_wait;uint64_t collectives;uint64_t Total;}cycles;int Krylov_iterations;int CAKrylov_formations_of_G;int vcycles_from_this_level;}" accesstype="readonly">
<access offset="(0 )" dependentloopvar="(  block)" reads="7" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="4" writes="0"/>
<access offset="(0 ,0 )" dependentloopvar="( ,  block)" reads="1" writes="0"/>
<access offset="(0 )" dependentloopvar="(  block)" reads="1" writes="0"/>
</array>
<if linenum="27" conditional="ilo <= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="ilo" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
</if>
<if linenum="28" conditional="jlo <= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
</if>
<if linenum="29" conditional="klo <= 0;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
</if>
<if linenum="30" conditional="ihi >= dim;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="ihi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
</if>
<if linenum="31" conditional="jhi >= dim;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jhi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
</if>
<if linenum="32" conditional="khi >= dim;" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="khi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ghosts" datatype="const int" isConstant="true" accesstype="readonly" reads="1" writes="0"/>
</if>
<loop linenum="36" loopvar="k" lowerbound="klo" upperbound="khi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="klo" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="khi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="37" loopvar="j" lowerbound="jlo" upperbound="jhi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="jlo" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="jhi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="writeread" reads="2" writes="1"/>
<loop linenum="38" loopvar="i" lowerbound="ilo" upperbound="ihi" stride="1" adds="0" multiplies="0" divides="0" specials="0">
<scalar name="ilo" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="ihi" datatype="int" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
<scalar name="i" datatype="int" isConstant="false" accesstype="writeread" reads="4" writes="1"/>
<scalar name="j" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="k" datatype="int" isConstant="false" accesstype="readonly" reads="2" writes="0"/>
<scalar name="jStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="kStride" datatype="const int" isConstant="true" accesstype="readonly" reads="2" writes="0"/>
<scalar name="grid" datatype="double * __restrict__" isConstant="false" accesstype="readonly" reads="1" writes="0"/>
</loop>
</loop>
</loop>
</loop>
<funccall linenum="43" name="" origname="CycleTime" module="unknown">
</funccall>
</function>
